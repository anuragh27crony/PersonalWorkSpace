<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.1 (Jython 2.7.0 on java1.8.0_101)" generated="20160916 15:24:21.073">
<suite source="C:\PCDetector_Testing\Testing\Robot" name="Robot" id="s1">
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests" name="Tests" id="s1-s1">
<kw type="setup" name="test suite setup">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${now} = BuiltIn.Get Time">
<doc>Returns the given time in the requested format.</doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:24:24.567">${now} = 2016-09-16 15:24:24</msg>
<status endtime="20160916 15:24:24.567" starttime="20160916 15:24:24.567" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SuiteStartTime}</arg>
<arg>${now}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:24:24.567">${SuiteStartTime} = 2016-09-16 15:24:24</msg>
<status endtime="20160916 15:24:24.583" starttime="20160916 15:24:24.567" status="PASS"></status>
</kw>
<status endtime="20160916 15:24:24.583" starttime="20160916 15:24:24.551" status="PASS"></status>
</kw>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests" name="Functional Tests" id="s1-s1-s1">
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\00__Start_Application.txt" name="Start Application" id="s1-s1-s1-s1">
<test name="Start PC Detector Application" id="s1-s1-s1-s1-t1">
<kw type="setup" name="Test Case Setup">
<doc>Make sure that the default configuration and license are used.</doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:24:26.205">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 15:24:26.205" starttime="20160916 15:24:26.189" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:24:26.221">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 15:24:26.221" starttime="20160916 15:24:26.221" status="PASS"></status>
</kw>
<status endtime="20160916 15:24:26.236" starttime="20160916 15:24:26.174" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:24:59.721">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 15:24:59.729" starttime="20160916 15:24:26.236" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:14.737">Slept 15 seconds</msg>
<status endtime="20160916 15:25:14.739" starttime="20160916 15:24:59.733" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:16.599">[log] CLICK on L(236,143)@S(0)[0,0 1280x1024]
[log] CLICK on L(1103,144)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 15:25:16.608" starttime="20160916 15:25:14.744" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>default</tag>
</tags>
<status critical="yes" endtime="20160916 15:25:16.611" starttime="20160916 15:24:26.174" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160916 15:25:16.624" starttime="20160916 15:24:24.614" status="PASS"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\01__Start_and_Stop_Channels.txt" name="Start and Stop Channels" id="s1-s1-s1-s2">
<test name="Stop and Start Every Channel In Configuration, One By One" id="s1-s1-s1-s2-t1">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:31.131">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:25:31.137" starttime="20160916 15:25:16.846" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfChannels} = PCDetectorKeywords.Number Of Channels In Configuration">
<doc></doc>
<arguments>
<arg>non-UDP</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:31.146">${NrOfChannels} = 4</msg>
<status endtime="20160916 15:25:31.145" starttime="20160916 15:25:31.141" status="PASS"></status>
</kw>
<kw type="for" name="${channel} IN RANGE [ 1 | ${NrOfChannels} + 1 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${channel} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:31.202">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:25:31.201" starttime="20160916 15:25:31.162" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:40.721">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:25:40.729" starttime="20160916 15:25:31.210" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:40.740">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:44.537">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:25:44.543" starttime="20160916 15:25:40.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:25:44.546">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:25:44.549">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:25:44.550">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:44.556">Comparing as boolean values</msg>
<status endtime="20160916 15:25:44.564" starttime="20160916 15:25:44.553" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:25:44.566">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:25:44.568" starttime="20160916 15:25:40.734" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:49.872">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:25:49.879" starttime="20160916 15:25:44.572" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:49.889">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:53.243">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:25:53.248" starttime="20160916 15:25:49.906" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:25:53.251">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:25:53.254">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:25:53.256">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:53.261">Comparing as boolean values</msg>
<status endtime="20160916 15:25:53.265" starttime="20160916 15:25:53.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:25:53.267">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:25:53.270" starttime="20160916 15:25:49.884" status="PASS"></status>
</kw>
<status endtime="20160916 15:25:53.273" starttime="20160916 15:25:31.158" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:25:53.313">${region} = R[18,142 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:25:53.313" starttime="20160916 15:25:53.277" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:03.381">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:26:03.392" starttime="20160916 15:25:53.317" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:03.404">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:06.793">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:26:06.794" starttime="20160916 15:26:03.423" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:06.796">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:26:06.799">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:26:06.801">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:06.807">Comparing as boolean values</msg>
<status endtime="20160916 15:26:06.812" starttime="20160916 15:26:06.803" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:06.814">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:26:06.816" starttime="20160916 15:26:03.398" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:13.771">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:26:13.777" starttime="20160916 15:26:06.820" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:13.787">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:17.143">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:26:17.145" starttime="20160916 15:26:13.805" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:17.147">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:26:17.150">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:26:17.151">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:17.156">Comparing as boolean values</msg>
<status endtime="20160916 15:26:17.161" starttime="20160916 15:26:17.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:17.163">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:26:17.165" starttime="20160916 15:26:13.781" status="PASS"></status>
</kw>
<status endtime="20160916 15:26:17.167" starttime="20160916 15:25:53.275" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:17.206">${region} = R[18,208 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:26:17.205" starttime="20160916 15:26:17.172" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:27.300">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:26:27.308" starttime="20160916 15:26:17.211" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:27.317">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:30.698">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:26:30.704" starttime="20160916 15:26:27.331" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:30.707">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:26:30.710">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:26:30.712">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:30.717">Comparing as boolean values</msg>
<status endtime="20160916 15:26:30.721" starttime="20160916 15:26:30.714" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:30.723">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:26:30.724" starttime="20160916 15:26:27.312" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:37.419">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:26:37.426" starttime="20160916 15:26:30.728" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:37.434">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:40.787">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:26:40.794" starttime="20160916 15:26:37.449" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:40.796">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:26:40.800">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:26:40.802">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:40.808">Comparing as boolean values</msg>
<status endtime="20160916 15:26:40.812" starttime="20160916 15:26:40.805" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:40.814">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:26:40.815" starttime="20160916 15:26:37.430" status="PASS"></status>
</kw>
<status endtime="20160916 15:26:40.819" starttime="20160916 15:26:17.168" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:40.859">${region} = R[18,274 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:26:40.858" starttime="20160916 15:26:40.823" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:50.948">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:26:50.953" starttime="20160916 15:26:40.863" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:50.967">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:54.347">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:26:54.349" starttime="20160916 15:26:50.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:54.351">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:26:54.353">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:26:54.354">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:26:54.359">Comparing as boolean values</msg>
<status endtime="20160916 15:26:54.364" starttime="20160916 15:26:54.357" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:26:54.367">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:26:54.368" starttime="20160916 15:26:50.957" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:01.042">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:27:01.047" starttime="20160916 15:26:54.379" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:01.056">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:04.409">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:27:04.411" starttime="20160916 15:27:01.071" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:27:04.413">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:27:04.416">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:27:04.418">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:04.423">Comparing as boolean values</msg>
<status endtime="20160916 15:27:04.427" starttime="20160916 15:27:04.420" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:27:04.429">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160916 15:27:04.430" starttime="20160916 15:27:01.051" status="PASS"></status>
</kw>
<status endtime="20160916 15:27:04.432" starttime="20160916 15:26:40.821" status="PASS"></status>
</kw>
<status endtime="20160916 15:27:04.434" starttime="20160916 15:25:31.151" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:27:04.436" starttime="20160916 15:25:16.837" status="PASS"></status>
</test>
<test name="Stop All Channels when All Channels Busy" id="s1-s1-s1-s2-t2">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:17.937">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:27:17.944" starttime="20160916 15:27:04.457" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:31.483">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:27:31.488" starttime="20160916 15:27:17.952" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:27:31.490">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:27:31.491">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160916 15:27:31.493">All Channels Busy</msg>
<status endtime="20160916 15:27:31.494" starttime="20160916 15:27:17.947" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:34.447">Warning pop-up Window found</msg>
<status endtime="20160916 15:27:34.453" starttime="20160916 15:27:31.497" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:47.905">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:27:47.910" starttime="20160916 15:27:34.456" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:27:47.917">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:01.474">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:28:01.480" starttime="20160916 15:27:47.922" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:28:01.481">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:28:01.483">Requirement check on 'All Channels Stopped [True]' after 13 seconds</msg>
<msg level="INFO" timestamp="20160916 15:28:01.484">All Channels Stopped</msg>
<status endtime="20160916 15:28:01.485" starttime="20160916 15:27:47.913" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:04.259">Warning pop-up Window found</msg>
<status endtime="20160916 15:28:04.264" starttime="20160916 15:28:01.488" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:04.273">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:17.835">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:28:17.841" starttime="20160916 15:28:04.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:28:17.844">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:28:17.846">Requirement check on 'All Channels Busy [True]' after 13 seconds</msg>
<msg level="INFO" timestamp="20160916 15:28:17.848">All Channels Busy</msg>
<status endtime="20160916 15:28:17.850" starttime="20160916 15:28:04.268" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:28:17.854" starttime="20160916 15:27:04.448" status="PASS"></status>
</test>
<test name="Stop All Channels when Some Channels Busy" id="s1-s1-s1-s2-t3">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:31.337">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:28:31.344" starttime="20160916 15:28:17.873" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:44.880">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:28:44.886" starttime="20160916 15:28:31.353" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:28:44.888">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:28:44.889">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160916 15:28:44.891">All Channels Busy</msg>
<status endtime="20160916 15:28:44.892" starttime="20160916 15:28:31.347" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:44.945">${region} = R[18,142 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:28:44.944" starttime="20160916 15:28:44.904" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:48.282">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:28:48.288" starttime="20160916 15:28:44.949" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:28:48.292">${region} = R[18,142 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:28:48.291" starttime="20160916 15:28:44.898" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:28:58.523">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:28:58.529" starttime="20160916 15:28:48.296" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:01.868">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:29:01.874" starttime="20160916 15:28:58.534" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:01.883">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:05.267">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:29:05.272" starttime="20160916 15:29:01.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:29:05.275">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:29:05.278">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:29:05.279">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:05.285">Comparing as boolean values</msg>
<status endtime="20160916 15:29:05.290" starttime="20160916 15:29:05.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:29:05.292">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160916 15:29:05.294">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160916 15:29:05.295" starttime="20160916 15:29:01.877" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:05.343">${region} = R[18,274 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:29:05.342" starttime="20160916 15:29:05.308" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:08.680">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:29:08.682" starttime="20160916 15:29:05.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:29:08.686">${region} = R[18,274 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:29:08.684" starttime="20160916 15:29:05.300" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:18.301">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:29:18.309" starttime="20160916 15:29:08.689" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:21.647">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:29:21.652" starttime="20160916 15:29:18.313" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:21.660">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:25.046">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:29:25.048" starttime="20160916 15:29:21.673" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:29:25.050">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:29:25.053">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:29:25.054">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:25.059">Comparing as boolean values</msg>
<status endtime="20160916 15:29:25.063" starttime="20160916 15:29:25.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:29:25.065">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160916 15:29:25.066">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160916 15:29:25.067" starttime="20160916 15:29:21.655" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:27.687">Warning pop-up Window found</msg>
<status endtime="20160916 15:29:27.692" starttime="20160916 15:29:25.071" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:41.145">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:29:41.150" starttime="20160916 15:29:27.697" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:41.158">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:54.740">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:29:54.746" starttime="20160916 15:29:41.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:29:54.748">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:29:54.749">Requirement check on 'All Channels Stopped [True]' after 13 seconds</msg>
<msg level="INFO" timestamp="20160916 15:29:54.751">All Channels Stopped</msg>
<status endtime="20160916 15:29:54.752" starttime="20160916 15:29:41.153" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:57.267">Warning pop-up Window found</msg>
<status endtime="20160916 15:29:57.272" starttime="20160916 15:29:54.755" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:29:57.282">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:30:08.241">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:30:08.246" starttime="20160916 15:29:57.287" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:30:08.248">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:30:08.250">Requirement check on 'All Channels Busy [True]' after 10 seconds</msg>
<msg level="INFO" timestamp="20160916 15:30:08.252">All Channels Busy</msg>
<status endtime="20160916 15:30:08.253" starttime="20160916 15:29:57.277" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:30:08.258" starttime="20160916 15:28:17.865" status="PASS"></status>
</test>
<test name="Start All Channels when Some Channels Stopped" id="s1-s1-s1-s2-t4">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:30:21.774">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:30:21.782" starttime="20160916 15:30:08.281" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:30:35.337">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:30:35.343" starttime="20160916 15:30:21.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:30:35.346">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:30:35.348">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160916 15:30:35.352">All Channels Busy</msg>
<status endtime="20160916 15:30:35.353" starttime="20160916 15:30:21.786" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:30:38.137">Warning pop-up Window found</msg>
<status endtime="20160916 15:30:38.145" starttime="20160916 15:30:35.358" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:30:51.622">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:30:51.628" starttime="20160916 15:30:38.152" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:30:51.640">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:05.250">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:31:05.256" starttime="20160916 15:30:51.647" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:05.258">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:31:05.260">Requirement check on 'All Channels Stopped [True]' after 13 seconds</msg>
<msg level="INFO" timestamp="20160916 15:31:05.262">All Channels Stopped</msg>
<status endtime="20160916 15:31:05.263" starttime="20160916 15:30:51.633" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:05.318">${region} = R[18,142 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:31:05.317" starttime="20160916 15:31:05.280" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:08.663">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:31:08.665" starttime="20160916 15:31:05.327" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:08.670">${region} = R[18,142 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:31:08.669" starttime="20160916 15:31:05.269" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:15.175">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:31:15.182" starttime="20160916 15:31:08.675" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:15.194">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:18.566">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:31:18.572" starttime="20160916 15:31:15.216" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:18.574">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:31:18.578">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:31:18.580">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:18.587">Comparing as boolean values</msg>
<status endtime="20160916 15:31:18.591" starttime="20160916 15:31:18.583" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:18.594">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160916 15:31:18.595">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160916 15:31:18.597" starttime="20160916 15:31:15.187" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:18.648">${region} = R[18,208 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:31:18.647" starttime="20160916 15:31:18.613" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:21.988">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:31:21.994" starttime="20160916 15:31:18.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:22.000">${region} = R[18,208 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:31:21.998" starttime="20160916 15:31:18.603" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:28.210">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:31:28.215" starttime="20160916 15:31:22.005" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:28.225">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:31.595">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:31:31.600" starttime="20160916 15:31:28.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:31.604">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:31:31.608">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:31:31.610">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:31.617">Comparing as boolean values</msg>
<status endtime="20160916 15:31:31.622" starttime="20160916 15:31:31.613" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:31.624">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160916 15:31:31.626">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160916 15:31:31.627" starttime="20160916 15:31:28.219" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:34.211">Warning pop-up Window found</msg>
<status endtime="20160916 15:31:34.216" starttime="20160916 15:31:31.632" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:34.227">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:31:47.836">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:31:47.842" starttime="20160916 15:31:34.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:31:47.845">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:31:47.846">Requirement check on 'All Channels Busy [True]' after 13 seconds</msg>
<msg level="INFO" timestamp="20160916 15:31:47.848">All Channels Busy</msg>
<status endtime="20160916 15:31:47.849" starttime="20160916 15:31:34.221" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>known_issue</tag>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:31:47.852" starttime="20160916 15:30:08.270" status="PASS"></status>
</test>
<test name="Start a Channel with OperationMode Idle" id="s1-s1-s1-s2-t5">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:32:01.338">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:32:01.343" starttime="20160916 15:31:47.877" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_Channel_1_Idle}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:32:06.552">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 15:32:06.559" starttime="20160916 15:32:01.363" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:32:21.578">Slept 15 seconds</msg>
<status endtime="20160916 15:32:21.578" starttime="20160916 15:32:06.565" status="PASS"></status>
</kw>
<status endtime="20160916 15:32:21.578" starttime="20160916 15:32:01.355" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:32:21.594">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_OperationModeIdle1.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 15:32:21.594" starttime="20160916 15:32:21.578" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:32:36.617">Slept 15 seconds</msg>
<status endtime="20160916 15:32:36.617" starttime="20160916 15:32:21.610" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 15:32:36.648" starttime="20160916 15:32:36.617" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:32:51.664">Slept 15 seconds</msg>
<status endtime="20160916 15:32:51.666" starttime="20160916 15:32:36.648" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:24.788">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 15:33:24.793" starttime="20160916 15:32:51.666" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:39.801">Slept 15 seconds</msg>
<status endtime="20160916 15:33:39.804" starttime="20160916 15:33:24.798" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:41.721">[log] CLICK on L(192,99)@S(0)[0,0 1280x1024]
[log] CLICK on L(1059,100)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 15:33:41.727" starttime="20160916 15:33:39.809" status="PASS"></status>
</kw>
<status endtime="20160916 15:33:41.735" starttime="20160916 15:32:51.666" status="PASS"></status>
</kw>
<status endtime="20160916 15:33:41.740" starttime="20160916 15:32:21.594" status="PASS"></status>
</kw>
<status endtime="20160916 15:33:41.743" starttime="20160916 15:32:01.347" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:41.867">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:33:41.866" starttime="20160916 15:33:41.758" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:45.208">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:33:45.214" starttime="20160916 15:33:41.873" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:33:45.219">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:33:45.218" starttime="20160916 15:33:41.749" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:48.613">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:33:48.618" starttime="20160916 15:33:45.242" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:33:48.621">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:33:48.624">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:33:48.626">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:48.632">Comparing as boolean values</msg>
<status endtime="20160916 15:33:48.636" starttime="20160916 15:33:48.628" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:33:48.639">Requirement check on 'Channel Stopped ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:33:48.642">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160916 15:33:48.644" starttime="20160916 15:33:45.224" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:54.726">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160916 15:33:54.732" starttime="20160916 15:33:48.648" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:58.113">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:33:58.115" starttime="20160916 15:33:54.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:33:58.119">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:33:58.123">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:33:58.124">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:33:58.130">Comparing as boolean values</msg>
<status endtime="20160916 15:33:58.134" starttime="20160916 15:33:58.127" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:33:58.136">Requirement check on 'Channel Busy ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:33:58.138">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160916 15:33:58.139" starttime="20160916 15:33:54.737" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:34:03.530">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 15:34:03.535" starttime="20160916 15:33:58.160" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:34:18.546">Slept 15 seconds</msg>
<status endtime="20160916 15:34:18.548" starttime="20160916 15:34:03.540" status="PASS"></status>
</kw>
<status endtime="20160916 15:34:18.548" starttime="20160916 15:33:58.152" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:34:18.548">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 15:34:18.548" starttime="20160916 15:34:18.548" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:34:33.570">Slept 15 seconds</msg>
<status endtime="20160916 15:34:33.570" starttime="20160916 15:34:18.563" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 15:34:33.586" starttime="20160916 15:34:33.570" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:34:48.602">Slept 15 seconds</msg>
<status endtime="20160916 15:34:48.604" starttime="20160916 15:34:33.586" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:21.892">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 15:35:21.898" starttime="20160916 15:34:48.604" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:36.908">Slept 15 seconds</msg>
<status endtime="20160916 15:35:36.910" starttime="20160916 15:35:21.904" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:38.816">[log] CLICK on L(148,55)@S(0)[0,0 1280x1024]
[log] CLICK on L(1015,56)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 15:35:38.825" starttime="20160916 15:35:36.916" status="PASS"></status>
</kw>
<status endtime="20160916 15:35:38.828" starttime="20160916 15:34:48.604" status="PASS"></status>
</kw>
<status endtime="20160916 15:35:38.831" starttime="20160916 15:34:18.563" status="PASS"></status>
</kw>
<status endtime="20160916 15:35:38.834" starttime="20160916 15:33:58.142" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:35:38.837" starttime="20160916 15:31:47.866" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160916 15:35:38.865" starttime="20160916 15:25:16.646" status="PASS"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\02__Enable_and_Disable_Features.txt" name="Enable and Disable Features" id="s1-s1-s1-s3">
<kw type="setup" name="shared_keywords.Set Ceco Length">
<doc></doc>
<arguments>
<arg>${2Minutes}</arg>
</arguments>
<kw type="kw" name="${RestartRequired} = PCDetector.Set Ceco Length And Stop Application">
<doc></doc>
<arguments>
<arg>${CecoLength}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:42.738">Before checking the ceco
Scores 15_min_ceco=0.909117102623 and 2_min_ceco=0.953823208809 
Ceco Legth Update Not Required</msg>
<msg level="INFO" timestamp="20160916 15:35:42.744">${RestartRequired} = False</msg>
<status endtime="20160916 15:35:42.743" starttime="20160916 15:35:39.170" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${RestartRequired}</arg>
<arg>Start PC Detector Application After 15 Seconds</arg>
</arguments>
<status endtime="20160916 15:35:42.753" starttime="20160916 15:35:42.749" status="PASS"></status>
</kw>
<status endtime="20160916 15:35:42.756" starttime="20160916 15:35:39.162" status="PASS"></status>
</kw>
<test name="Enable Watermarking Feature Channel 1" id="s1-s1-s1-s3-t1">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:42.819">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:35:42.818" starttime="20160916 15:35:42.776" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:46.174">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:35:46.176" starttime="20160916 15:35:42.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:46.181">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:35:46.179" starttime="20160916 15:35:42.770" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:35:46.226" starttime="20160916 15:35:46.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:46.228">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:35:46.231">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:35:46.232">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:46.237">Comparing as boolean values</msg>
<status endtime="20160916 15:35:46.242" starttime="20160916 15:35:46.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:46.244">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:35:46.245">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:35:46.246" starttime="20160916 15:35:46.185" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Watermarking">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:49.596">Warning pop-up Window found</msg>
<status endtime="20160916 15:35:49.603" starttime="20160916 15:35:46.249" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is watermarking disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:49.612">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:35:49.658" starttime="20160916 15:35:49.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:49.660">'is watermarking disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:35:49.664">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:35:49.666">Evaluating 'is watermarking disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:49.671">Comparing as boolean values</msg>
<status endtime="20160916 15:35:49.675" starttime="20160916 15:35:49.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:49.677">Requirement check on 'is watermarking disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:35:49.678">Is Watermarking Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:35:49.680" starttime="20160916 15:35:49.606" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Watermarking">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:51.325">Warning pop-up Window found</msg>
<status endtime="20160916 15:35:51.333" starttime="20160916 15:35:49.682" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:51.342">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:35:51.377" starttime="20160916 15:35:51.354" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:51.379">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:35:51.381">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:35:51.383">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:51.388">Comparing as boolean values</msg>
<status endtime="20160916 15:35:51.393" starttime="20160916 15:35:51.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:51.395">Requirement check on 'is watermarking enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:35:51.397">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:35:51.399" starttime="20160916 15:35:51.336" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:35:51.401" starttime="20160916 15:35:42.760" status="PASS"></status>
</test>
<test name="Disable VFP CECO Feature When AFP CECO is Enabled Channel 1" id="s1-s1-s1-s3-t2">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:51.459">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:35:51.458" starttime="20160916 15:35:51.424" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:54.799">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:35:54.805" starttime="20160916 15:35:51.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:54.809">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:35:54.808" starttime="20160916 15:35:51.418" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:35:54.852" starttime="20160916 15:35:54.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:54.854">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:35:54.857">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:35:54.858">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:54.864">Comparing as boolean values</msg>
<status endtime="20160916 15:35:54.870" starttime="20160916 15:35:54.861" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:54.872">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:35:54.873">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:35:54.874" starttime="20160916 15:35:54.813" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:35:54.915" starttime="20160916 15:35:54.890" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:54.917">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:35:54.920">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:35:54.921">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:54.926">Comparing as boolean values</msg>
<status endtime="20160916 15:35:54.929" starttime="20160916 15:35:54.923" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:54.931">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:35:54.934">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:35:54.935" starttime="20160916 15:35:54.877" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:57.938">Warning pop-up Window found</msg>
<status endtime="20160916 15:35:57.945" starttime="20160916 15:35:54.938" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:57.955">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:35:57.996" starttime="20160916 15:35:57.972" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:57.998">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:35:58.003">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:35:58.005">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:35:58.011">Comparing as boolean values</msg>
<status endtime="20160916 15:35:58.015" starttime="20160916 15:35:58.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:35:58.016">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:35:58.018">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:35:58.019" starttime="20160916 15:35:57.949" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:37:58.031">Slept 2 minutes</msg>
<status endtime="20160916 15:37:58.034" starttime="20160916 15:35:58.028" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:37:58.651">Latest Ceco file:  D:\civolution\Data\WcD07681609161420_01.ce</msg>
<msg level="INFO" timestamp="20160916 15:37:58.662">${NrOfFiles} = 920</msg>
<status endtime="20160916 15:37:58.661" starttime="20160916 15:37:58.038" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:37:58.666">${NrOfCecoFiles} = 920</msg>
<status endtime="20160916 15:37:58.665" starttime="20160916 15:35:58.023" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:37:58.676">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:37:59.236">Latest Ceco file:  D:\civolution\Data\WcD07681609161420_01.ce</msg>
<status endtime="20160916 15:37:59.242" starttime="20160916 15:37:58.707" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:37:59.244">'Generated Ceco Files For Channel 1' is '920'</msg>
<msg level="INFO" timestamp="20160916 15:37:59.248">Interpreting '${NrOfCecoFiles}' as fixed value '920'</msg>
<msg level="INFO" timestamp="20160916 15:37:59.249">Evaluating 'Generated Ceco Files For Channel 1 [920]' &gt; '${NrOfCecoFiles} [920]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>920</arg>
<arg>920</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:37:59.255">Comparing evaluated keyword values</msg>
<status endtime="20160916 15:37:59.262" starttime="20160916 15:37:59.252" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:04.771">Latest Ceco file:  D:\civolution\Data\WcD07681609161436_01.ce</msg>
<status endtime="20160916 15:38:04.776" starttime="20160916 15:38:04.268" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:04.778">'Generated Ceco Files For Channel 1' is '921'</msg>
<msg level="INFO" timestamp="20160916 15:38:04.781">Interpreting '${NrOfCecoFiles}' as fixed value '920'</msg>
<msg level="INFO" timestamp="20160916 15:38:04.783">Evaluating 'Generated Ceco Files For Channel 1 [921]' &gt; '${NrOfCecoFiles} [920]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>921</arg>
<arg>920</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:04.788">Comparing evaluated keyword values</msg>
<status endtime="20160916 15:38:04.792" starttime="20160916 15:38:04.785" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:04.795">Requirement check on 'Generated Ceco Files For Channel 1 [921] &gt; ${NrOfCecoFiles} [920]' after 6 seconds</msg>
<msg level="INFO" timestamp="20160916 15:38:04.797">Generated CecoFiles For Channel, 1
        &gt;, 920, 920
        Generated CecoFiles For Channel, 1
        &gt;, 921, 920</msg>
<status endtime="20160916 15:38:04.799" starttime="20160916 15:37:58.670" status="PASS"></status>
</kw>
<kw type="kw" name="${CecoFile} = PCDetectorKeywords.Latest Ceco File For Channel">
<doc>Robot keyword: Get Name of Last Ceco File for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.072">${CecoFile} = D:\civolution\Data\WcD07681609161436_01.ce</msg>
<status endtime="20160916 15:38:05.071" starttime="20160916 15:38:04.802" status="PASS"></status>
</kw>
<kw type="kw" name="${Consistency}, ${VFP_blocks}, ${AFP_blocks} = bmcecocheck.Consistency Of Ceco File">
<doc>Robot keyword: Verify format of CECO file</doc>
<arguments>
<arg>${CecoFile}</arg>
<arg>${Verbose}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.200">${Consistency} = 0</msg>
<msg level="INFO" timestamp="20160916 15:38:05.201">${VFP_blocks} = 23</msg>
<msg level="INFO" timestamp="20160916 15:38:05.202">${AFP_blocks} = 0</msg>
<status endtime="20160916 15:38:05.199" starttime="20160916 15:38:05.079" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${Consistency}</arg>
<arg>=</arg>
<arg>${OK}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.214">Interpreting '${Consistency}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160916 15:38:05.217">Interpreting '${OK}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160916 15:38:05.218">Evaluating '${Consistency} [0]' = '${OK} [0]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.223">Comparing as integer values</msg>
<status endtime="20160916 15:38:05.230" starttime="20160916 15:38:05.221" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:05.233">Requirement check on '${Consistency} [0] = ${OK} [0]'</msg>
<msg level="INFO" timestamp="20160916 15:38:05.234">=, 0, 0</msg>
<status endtime="20160916 15:38:05.235" starttime="20160916 15:38:05.206" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${VFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.247">Interpreting '${VFP_blocks}' as fixed value '23'</msg>
<msg level="INFO" timestamp="20160916 15:38:05.250">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:05.251">Evaluating '${VFP_blocks} [23]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>23</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.256">Comparing as integer values</msg>
<status endtime="20160916 15:38:05.259" starttime="20160916 15:38:05.253" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:05.264">=, 23, 0</msg>
<msg level="FAIL" timestamp="20160916 15:38:05.333">CheckFailed: Requirement check on '${VFP_blocks} [23] = 0'</msg>
<msg level="INFO" timestamp="20160916 15:38:05.339">Saving screenshot Enable and Disable Features-Disable VFP CECO Feature When AFP CECO is Enabled Channel 1-=_20160916-15h38m05.338.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 15:38:05.637">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Disable VFP CECO Feature When AFP CECO is Enabled Channel 1-=_20160916-15h38m05.338.png"&gt;&lt;img src="Enable and Disable Features-Disable VFP CECO Feature When AFP CECO is Enabled Channel 1-=_20160916-15h38m05.338.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 15:38:05.336" starttime="20160916 15:38:05.238" status="FAIL"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${AFP_blocks}</arg>
<arg>&gt;</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.649">Interpreting '${AFP_blocks}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160916 15:38:05.652">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:05.653">Evaluating '${AFP_blocks} [0]' &gt; '0'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.658">Comparing as integer values</msg>
<status endtime="20160916 15:38:05.664" starttime="20160916 15:38:05.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:05.667">&gt;, 0, 0</msg>
<msg level="FAIL" timestamp="20160916 15:38:05.668">CheckFailed: Requirement check on '${AFP_blocks} [0] &gt; 0'</msg>
<status endtime="20160916 15:38:05.670" starttime="20160916 15:38:05.639" status="FAIL"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 15:38:05.673" starttime="20160916 15:35:51.409" status="FAIL">Several failures occurred:

1) CheckFailed: Requirement check on '${VFP_blocks} [23] = 0'

2) CheckFailed: Requirement check on '${AFP_blocks} [0] &gt; 0'</status>
</test>
<test name="Enable disabled VFP CECO Feature When AFP CECO is Enabled Channel 1" id="s1-s1-s1-s3-t3">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:05.736">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:38:05.735" starttime="20160916 15:38:05.699" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:09.074">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:38:09.079" starttime="20160916 15:38:05.741" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:09.083">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:38:09.082" starttime="20160916 15:38:05.691" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:38:09.126" starttime="20160916 15:38:09.105" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:09.128">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:38:09.132">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:09.134">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:09.141">Comparing as boolean values</msg>
<status endtime="20160916 15:38:09.145" starttime="20160916 15:38:09.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:09.147">Precondition check on 'is vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:38:09.148">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:38:09.149" starttime="20160916 15:38:09.087" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:38:09.188" starttime="20160916 15:38:09.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:09.190">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:38:09.193">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:09.194">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:09.200">Comparing as boolean values</msg>
<status endtime="20160916 15:38:09.204" starttime="20160916 15:38:09.196" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:09.206">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:38:09.207">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:38:09.208" starttime="20160916 15:38:09.152" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:12.166">Warning pop-up Window found</msg>
<status endtime="20160916 15:38:12.172" starttime="20160916 15:38:09.211" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:12.180">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:38:12.217" starttime="20160916 15:38:12.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:12.218">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:38:12.221">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:12.222">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:12.227">Comparing as boolean values</msg>
<status endtime="20160916 15:38:12.231" starttime="20160916 15:38:12.224" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:12.233">Requirement check on 'is vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:38:12.235">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:38:12.237" starttime="20160916 15:38:12.175" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:12.244">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:12.712">Latest Ceco file:  D:\civolution\Data\WcD07681609161436_01.ce</msg>
<status endtime="20160916 15:38:12.717" starttime="20160916 15:38:12.256" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:12.719">'Generated Ceco Files For Channel 1' is '921'</msg>
<msg level="INFO" timestamp="20160916 15:38:12.722">Generated CecoFiles For Channel, 1</msg>
<msg level="FAIL" timestamp="20160916 15:38:12.724">Non-existing variable '${NrOfCecoFiles}'.</msg>
<msg level="INFO" timestamp="20160916 15:38:12.726">Saving screenshot Enable and Disable Features-Enable disabled VFP CECO Feature When AFP CECO is Enabled Channel 1-generated cecofiles for channel_20160916-15h38m12.726.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 15:38:12.996">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Enable disabled VFP CECO Feature When AFP CECO is Enabled Channel 1-generated cecofiles for channel_20160916-15h38m12.726.png"&gt;&lt;img src="Enable and Disable Features-Enable disabled VFP CECO Feature When AFP CECO is Enabled Channel 1-generated cecofiles for channel_20160916-15h38m12.726.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 15:38:12.725" starttime="20160916 15:38:12.240" status="FAIL"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 15:38:12.998" starttime="20160916 15:38:05.682" status="FAIL">Non-existing variable '${NrOfCecoFiles}'.</status>
</test>
<test name="Disable AFP CECO Feature when VFP CECO is Enabled Channel 1" id="s1-s1-s1-s3-t4">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:13.073">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:38:13.072" starttime="20160916 15:38:13.021" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:16.412">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:38:16.414" starttime="20160916 15:38:13.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:16.417">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:38:16.416" starttime="20160916 15:38:13.016" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:38:16.454" starttime="20160916 15:38:16.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:16.456">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:38:16.459">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:16.460">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:16.464">Comparing as boolean values</msg>
<status endtime="20160916 15:38:16.468" starttime="20160916 15:38:16.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:16.470">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:38:16.471">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:38:16.473" starttime="20160916 15:38:16.421" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:38:16.518" starttime="20160916 15:38:16.489" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:16.523">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:38:16.526">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:16.528">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:16.533">Comparing as boolean values</msg>
<status endtime="20160916 15:38:16.537" starttime="20160916 15:38:16.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:16.540">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:38:16.542">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:38:16.544" starttime="20160916 15:38:16.476" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Afp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:19.520">Warning pop-up Window found</msg>
<status endtime="20160916 15:38:19.525" starttime="20160916 15:38:16.546" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:19.532">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:38:19.568" starttime="20160916 15:38:19.544" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:19.570">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:38:19.573">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:38:19.574">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:38:19.581">Comparing as boolean values</msg>
<status endtime="20160916 15:38:19.584" starttime="20160916 15:38:19.577" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:38:19.585">Requirement check on 'is afp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:38:19.586">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:38:19.587" starttime="20160916 15:38:19.528" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:40:19.599">Slept 2 minutes</msg>
<status endtime="20160916 15:40:19.606" starttime="20160916 15:38:19.596" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:40:20.085">Latest Ceco file:  D:\civolution\Data\WcD07681609161438_01.ce</msg>
<msg level="INFO" timestamp="20160916 15:40:20.091">${NrOfFiles} = 922</msg>
<status endtime="20160916 15:40:20.090" starttime="20160916 15:40:19.609" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:40:20.095">${NrOfCecoFiles} = 922</msg>
<status endtime="20160916 15:40:20.093" starttime="20160916 15:38:19.592" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel 1 After 120 Seconds</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:20.120">Slept 2 minutes</msg>
<status endtime="20160916 15:42:20.122" starttime="20160916 15:40:20.117" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:20.587">Latest Ceco file:  D:\civolution\Data\WcD07681609161440_01.ce</msg>
<msg level="INFO" timestamp="20160916 15:42:20.592">${NrOfFiles} = 923</msg>
<status endtime="20160916 15:42:20.592" starttime="20160916 15:42:20.125" status="PASS"></status>
</kw>
<status endtime="20160916 15:42:20.596" starttime="20160916 15:40:20.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:20.599">'Generated Ceco Files For Channel 1 After 120 Seconds' is '923'</msg>
<msg level="INFO" timestamp="20160916 15:42:20.602">Interpreting '${NrOfCecoFiles}' as fixed value '922'</msg>
<msg level="INFO" timestamp="20160916 15:42:20.603">Evaluating 'Generated Ceco Files For Channel 1 After 120 Seconds [923]' &gt; '${NrOfCecoFiles} [922]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>923</arg>
<arg>922</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:20.607">Comparing evaluated keyword values</msg>
<status endtime="20160916 15:42:20.612" starttime="20160916 15:42:20.605" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:20.614">Requirement check on 'Generated Ceco Files For Channel 1 After 120 Seconds [923] &gt; ${NrOfCecoFiles} [922]'</msg>
<msg level="INFO" timestamp="20160916 15:42:20.615">Generated Ceco Files For Channel 1 After 120 Seconds
        &gt;, 923, 922</msg>
<status endtime="20160916 15:42:20.615" starttime="20160916 15:40:20.099" status="PASS"></status>
</kw>
<kw type="kw" name="${CecoFile} = PCDetectorKeywords.Latest Ceco File For Channel">
<doc>Robot keyword: Get Name of Last Ceco File for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:20.875">${CecoFile} = D:\civolution\Data\WcD07681609161440_01.ce</msg>
<status endtime="20160916 15:42:20.875" starttime="20160916 15:42:20.618" status="PASS"></status>
</kw>
<kw type="kw" name="${Consistency}, ${VFP_blocks}, ${AFP_blocks} = bmcecocheck.Consistency Of Ceco File">
<doc>Robot keyword: Verify format of CECO file</doc>
<arguments>
<arg>${CecoFile}</arg>
<arg>${Verbose}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.028">${Consistency} = 0</msg>
<msg level="INFO" timestamp="20160916 15:42:21.034">${VFP_blocks} = 0</msg>
<msg level="INFO" timestamp="20160916 15:42:21.036">${AFP_blocks} = 40</msg>
<status endtime="20160916 15:42:21.026" starttime="20160916 15:42:20.882" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${Consistency}</arg>
<arg>=</arg>
<arg>${OK}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.048">Interpreting '${Consistency}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160916 15:42:21.051">Interpreting '${OK}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160916 15:42:21.052">Evaluating '${Consistency} [0]' = '${OK} [0]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.057">Comparing as integer values</msg>
<status endtime="20160916 15:42:21.061" starttime="20160916 15:42:21.054" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:21.064">Requirement check on '${Consistency} [0] = ${OK} [0]'</msg>
<msg level="INFO" timestamp="20160916 15:42:21.066">=, 0, 0</msg>
<status endtime="20160916 15:42:21.067" starttime="20160916 15:42:21.040" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${VFP_blocks}</arg>
<arg>&gt;</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.077">Interpreting '${VFP_blocks}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160916 15:42:21.079">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:21.081">Evaluating '${VFP_blocks} [0]' &gt; '0'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.085">Comparing as integer values</msg>
<status endtime="20160916 15:42:21.088" starttime="20160916 15:42:21.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:21.090">&gt;, 0, 0</msg>
<msg level="FAIL" timestamp="20160916 15:42:21.092">CheckFailed: Requirement check on '${VFP_blocks} [0] &gt; 0'</msg>
<msg level="INFO" timestamp="20160916 15:42:21.096">Saving screenshot Enable and Disable Features-Disable AFP CECO Feature when VFP CECO is Enabled Channel 1-_20160916-15h42m21.095.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 15:42:21.343">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Disable AFP CECO Feature when VFP CECO is Enabled Channel 1-_20160916-15h42m21.095.png"&gt;&lt;img src="Enable and Disable Features-Disable AFP CECO Feature when VFP CECO is Enabled Channel 1-_20160916-15h42m21.095.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 15:42:21.093" starttime="20160916 15:42:21.069" status="FAIL"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${AFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.353">Interpreting '${AFP_blocks}' as fixed value '40'</msg>
<msg level="INFO" timestamp="20160916 15:42:21.356">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:21.357">Evaluating '${AFP_blocks} [40]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>40</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.364">Comparing as integer values</msg>
<status endtime="20160916 15:42:21.369" starttime="20160916 15:42:21.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:21.371">=, 40, 0</msg>
<msg level="FAIL" timestamp="20160916 15:42:21.373">CheckFailed: Requirement check on '${AFP_blocks} [40] = 0'</msg>
<status endtime="20160916 15:42:21.375" starttime="20160916 15:42:21.346" status="FAIL"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 15:42:21.377" starttime="20160916 15:38:13.008" status="FAIL">Several failures occurred:

1) CheckFailed: Requirement check on '${VFP_blocks} [0] &gt; 0'

2) CheckFailed: Requirement check on '${AFP_blocks} [40] = 0'</status>
</test>
<test name="Enable AFP CECO Feature when VFP CECO is Enabled Channel 1" id="s1-s1-s1-s3-t5">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:21.436">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:42:21.435" starttime="20160916 15:42:21.399" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:24.773">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:42:24.778" starttime="20160916 15:42:21.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:24.781">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:42:24.780" starttime="20160916 15:42:21.393" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:42:24.818" starttime="20160916 15:42:24.798" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:24.820">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:42:24.823">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:24.824">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:24.828">Comparing as boolean values</msg>
<status endtime="20160916 15:42:24.833" starttime="20160916 15:42:24.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:24.836">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:42:24.837">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:42:24.838" starttime="20160916 15:42:24.785" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:42:24.877" starttime="20160916 15:42:24.855" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:24.879">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:42:24.881">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:24.883">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:24.887">Comparing as boolean values</msg>
<status endtime="20160916 15:42:24.890" starttime="20160916 15:42:24.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:24.891">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:42:24.893">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:42:24.894" starttime="20160916 15:42:24.841" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:26.405">Warning pop-up Window found</msg>
<status endtime="20160916 15:42:26.409" starttime="20160916 15:42:24.896" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:26.417">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:42:26.451" starttime="20160916 15:42:26.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:26.452">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:42:26.455">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:26.456">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:26.461">Comparing as boolean values</msg>
<status endtime="20160916 15:42:26.465" starttime="20160916 15:42:26.459" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:26.467">Requirement check on 'is afp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:42:26.469">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:42:26.471" starttime="20160916 15:42:26.412" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:26.478">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:26.989">Latest Ceco file:  D:\civolution\Data\WcD07681609161440_01.ce</msg>
<status endtime="20160916 15:42:26.995" starttime="20160916 15:42:26.490" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:26.996">'Generated Ceco Files For Channel 1' is '923'</msg>
<msg level="INFO" timestamp="20160916 15:42:27.000">Generated CecoFiles For Channel, 1</msg>
<msg level="FAIL" timestamp="20160916 15:42:27.002">Non-existing variable '${NrOfCecoFiles}'.</msg>
<msg level="INFO" timestamp="20160916 15:42:27.007">Saving screenshot Enable and Disable Features-Enable AFP CECO Feature when VFP CECO is Enabled Channel 1-generated cecofiles for channel_20160916-15h42m27.006.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 15:42:27.273">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Enable AFP CECO Feature when VFP CECO is Enabled Channel 1-generated cecofiles for channel_20160916-15h42m27.006.png"&gt;&lt;img src="Enable and Disable Features-Enable AFP CECO Feature when VFP CECO is Enabled Channel 1-generated cecofiles for channel_20160916-15h42m27.006.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 15:42:27.004" starttime="20160916 15:42:26.474" status="FAIL"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 15:42:27.285" starttime="20160916 15:42:21.385" status="FAIL">Non-existing variable '${NrOfCecoFiles}'.</status>
</test>
<test name="Disable both AFP,VFP CECO Feature Channel 1" id="s1-s1-s1-s3-t6">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:27.344">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:42:27.343" starttime="20160916 15:42:27.309" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:30.681">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:42:30.682" starttime="20160916 15:42:27.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:30.686">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:42:30.685" starttime="20160916 15:42:27.304" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:42:30.736" starttime="20160916 15:42:30.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:30.737">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:42:30.742">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:30.744">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:30.748">Comparing as boolean values</msg>
<status endtime="20160916 15:42:30.753" starttime="20160916 15:42:30.746" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:30.755">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:42:30.756">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:42:30.757" starttime="20160916 15:42:30.689" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:42:30.795" starttime="20160916 15:42:30.772" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:30.797">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:42:30.799">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:30.800">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:30.806">Comparing as boolean values</msg>
<status endtime="20160916 15:42:30.810" starttime="20160916 15:42:30.803" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:30.812">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:42:30.813">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:42:30.814" starttime="20160916 15:42:30.760" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:34.014">Warning pop-up Window found</msg>
<status endtime="20160916 15:42:34.020" starttime="20160916 15:42:30.817" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:34.029">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:42:34.072" starttime="20160916 15:42:34.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:34.081">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:42:34.083">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:34.084">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:34.089">Comparing as boolean values</msg>
<status endtime="20160916 15:42:34.094" starttime="20160916 15:42:34.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:34.095">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:42:34.096">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:42:34.097" starttime="20160916 15:42:34.024" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Afp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:37.031">Warning pop-up Window found</msg>
<status endtime="20160916 15:42:37.035" starttime="20160916 15:42:34.100" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:37.043">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:42:37.079" starttime="20160916 15:42:37.057" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:37.082">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:42:37.085">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:42:37.086">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:42:37.090">Comparing as boolean values</msg>
<status endtime="20160916 15:42:37.094" starttime="20160916 15:42:37.088" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:42:37.096">Requirement check on 'is afp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:42:37.097">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:42:37.098" starttime="20160916 15:42:37.038" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:44:37.112">Slept 2 minutes</msg>
<status endtime="20160916 15:44:37.118" starttime="20160916 15:42:37.108" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:44:37.602">Latest Ceco file:  D:\civolution\Data\WcD07681609161442_01.ce</msg>
<msg level="INFO" timestamp="20160916 15:44:37.607">${NrOfFiles} = 924</msg>
<status endtime="20160916 15:44:37.606" starttime="20160916 15:44:37.122" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:44:37.610">${NrOfCecoFiles} = 924</msg>
<status endtime="20160916 15:44:37.609" starttime="20160916 15:42:37.103" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel 1 After 120 Seconds</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:37.635">Slept 2 minutes</msg>
<status endtime="20160916 15:46:37.637" starttime="20160916 15:44:37.631" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:38.138">Latest Ceco file:  D:\civolution\Data\WcD07681609161444_01.ce</msg>
<msg level="INFO" timestamp="20160916 15:46:38.144">${NrOfFiles} = 925</msg>
<status endtime="20160916 15:46:38.142" starttime="20160916 15:46:37.640" status="PASS"></status>
</kw>
<status endtime="20160916 15:46:38.147" starttime="20160916 15:44:37.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:38.148">'Generated Ceco Files For Channel 1 After 120 Seconds' is '925'</msg>
<msg level="INFO" timestamp="20160916 15:46:38.152">Interpreting '${NrOfCecoFiles}' as fixed value '924'</msg>
<msg level="INFO" timestamp="20160916 15:46:38.153">Evaluating 'Generated Ceco Files For Channel 1 After 120 Seconds [925]' = '${NrOfCecoFiles} [924]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>925</arg>
<arg>924</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:38.158">Comparing evaluated keyword values</msg>
<status endtime="20160916 15:46:38.161" starttime="20160916 15:46:38.156" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:38.163">Generated Ceco Files For Channel 1 After 120 Seconds
        =, 925, 924</msg>
<msg level="FAIL" timestamp="20160916 15:46:38.165">CheckFailed: Requirement check on 'Generated Ceco Files For Channel 1 After 120 Seconds [925] = ${NrOfCecoFiles} [924]'</msg>
<msg level="INFO" timestamp="20160916 15:46:38.168">Saving screenshot Enable and Disable Features-Disable both AFP,VFP CECO Feature Channel 1-=_20160916-15h46m38.167.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 15:46:38.413">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Disable both AFP,VFP CECO Feature Channel 1-=_20160916-15h46m38.167.png"&gt;&lt;img src="Enable and Disable Features-Disable both AFP,VFP CECO Feature Channel 1-=_20160916-15h46m38.167.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 15:46:38.166" starttime="20160916 15:44:37.613" status="FAIL"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:39.943">Warning pop-up Window found</msg>
<status endtime="20160916 15:46:39.948" starttime="20160916 15:46:38.415" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:39.958">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:46:40.004" starttime="20160916 15:46:39.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:40.006">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:46:40.008">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:46:40.009">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:40.014">Comparing as boolean values</msg>
<status endtime="20160916 15:46:40.018" starttime="20160916 15:46:40.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:40.020">Requirement check on 'is afp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:46:40.021">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:46:40.023" starttime="20160916 15:46:39.952" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:41.528">Warning pop-up Window found</msg>
<status endtime="20160916 15:46:41.530" starttime="20160916 15:46:40.027" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:41.538">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:46:41.583" starttime="20160916 15:46:41.550" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:41.590">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:46:41.593">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:46:41.595">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:41.599">Comparing as boolean values</msg>
<status endtime="20160916 15:46:41.604" starttime="20160916 15:46:41.597" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:41.606">Requirement check on 'is vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:46:41.607">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:46:41.608" starttime="20160916 15:46:41.533" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 15:46:41.611" starttime="20160916 15:42:27.295" status="FAIL">CheckFailed: Requirement check on 'Generated Ceco Files For Channel 1 After 120 Seconds [925] = ${NrOfCecoFiles} [924]'</status>
</test>
<test name="Disable Thumbnail Capturing Feature Channel 1" id="s1-s1-s1-s3-t7">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:41.705">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:46:41.704" starttime="20160916 15:46:41.635" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:45.043">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:46:45.045" starttime="20160916 15:46:41.709" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:45.048">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:46:45.047" starttime="20160916 15:46:41.630" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:46:45.131" starttime="20160916 15:46:45.064" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:45.136">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:46:45.138">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:46:45.139">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:45.144">Comparing as boolean values</msg>
<status endtime="20160916 15:46:45.147" starttime="20160916 15:46:45.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:45.148">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:46:45.149">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:46:45.150" starttime="20160916 15:46:45.051" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:48.157">Warning pop-up Window found</msg>
<status endtime="20160916 15:46:48.162" starttime="20160916 15:46:45.153" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:48.170">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:46:48.281" starttime="20160916 15:46:48.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:48.282">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:46:48.285">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:46:48.286">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:48.290">Comparing as boolean values</msg>
<status endtime="20160916 15:46:48.294" starttime="20160916 15:46:48.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:48.297">Requirement check on 'is thumbnail disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:46:48.298">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:46:48.299" starttime="20160916 15:46:48.166" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:50.311">Slept 2 seconds</msg>
<status endtime="20160916 15:46:50.313" starttime="20160916 15:46:48.309" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:46:50.535">${NrOfFiles} = 2077</msg>
<status endtime="20160916 15:46:50.535" starttime="20160916 15:46:50.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:46:50.543">${NrOfThumbnails} = 2077</msg>
<status endtime="20160916 15:46:50.542" starttime="20160916 15:46:48.303" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 300 Seconds</arg>
<arg>=</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 300 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:50.569">Slept 5 minutes</msg>
<status endtime="20160916 15:51:50.576" starttime="20160916 15:46:50.566" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:50.818">${NrOfFiles} = 2077</msg>
<status endtime="20160916 15:51:50.817" starttime="20160916 15:51:50.581" status="PASS"></status>
</kw>
<status endtime="20160916 15:51:50.825" starttime="20160916 15:46:50.559" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:50.828">'Generated Thumbnails For Channel 1 After 300 Seconds' is '2077'</msg>
<msg level="INFO" timestamp="20160916 15:51:50.832">Interpreting '${NrOfThumbnails}' as fixed value '2077'</msg>
<msg level="INFO" timestamp="20160916 15:51:50.833">Evaluating 'Generated Thumbnails For Channel 1 After 300 Seconds [2077]' = '${NrOfThumbnails} [2077]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>2077</arg>
<arg>2077</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:50.838">Comparing evaluated keyword values</msg>
<status endtime="20160916 15:51:50.842" starttime="20160916 15:51:50.836" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:50.843">Requirement check on 'Generated Thumbnails For Channel 1 After 300 Seconds [2077] = ${NrOfThumbnails} [2077]'</msg>
<msg level="INFO" timestamp="20160916 15:51:50.845">Generated Thumbnails For Channel 1 After 300 Seconds
        =, 2077, 2077</msg>
<status endtime="20160916 15:51:50.845" starttime="20160916 15:46:50.547" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:51:50.848" starttime="20160916 15:46:41.619" status="PASS"></status>
</test>
<test name="Enable Thumbnail Capturing Feature Channel 1" id="s1-s1-s1-s3-t8">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:50.909">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:51:50.908" starttime="20160916 15:51:50.872" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:54.245">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:51:54.250" starttime="20160916 15:51:50.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:54.255">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:51:54.254" starttime="20160916 15:51:50.866" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:51:54.296" starttime="20160916 15:51:54.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:54.298">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:51:54.302">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:51:54.303">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:54.308">Comparing as boolean values</msg>
<status endtime="20160916 15:51:54.312" starttime="20160916 15:51:54.306" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:54.313">Precondition check on 'is thumbnail disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:51:54.315">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:51:54.316" starttime="20160916 15:51:54.258" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:57.474">Warning pop-up Window found</msg>
<status endtime="20160916 15:51:57.479" starttime="20160916 15:51:54.319" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:57.488">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:51:57.531" starttime="20160916 15:51:57.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:57.533">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:51:57.538">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:51:57.539">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:57.545">Comparing as boolean values</msg>
<status endtime="20160916 15:51:57.549" starttime="20160916 15:51:57.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:57.551">Requirement check on 'is thumbnail enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:51:57.552">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:51:57.553" starttime="20160916 15:51:57.483" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:59.565">Slept 2 seconds</msg>
<status endtime="20160916 15:51:59.567" starttime="20160916 15:51:57.563" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:51:59.800">${NrOfFiles} = 2078</msg>
<status endtime="20160916 15:51:59.799" starttime="20160916 15:51:59.571" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:51:59.810">${NrOfThumbnails} = 2078</msg>
<status endtime="20160916 15:51:59.810" starttime="20160916 15:51:57.557" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 300 Seconds</arg>
<arg>&gt;</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 300 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:56:59.837">Slept 5 minutes</msg>
<status endtime="20160916 15:56:59.840" starttime="20160916 15:51:59.832" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:00.066">${NrOfFiles} = 2079</msg>
<status endtime="20160916 15:57:00.064" starttime="20160916 15:56:59.843" status="PASS"></status>
</kw>
<status endtime="20160916 15:57:00.074" starttime="20160916 15:51:59.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:57:00.075">'Generated Thumbnails For Channel 1 After 300 Seconds' is '2079'</msg>
<msg level="INFO" timestamp="20160916 15:57:00.079">Interpreting '${NrOfThumbnails}' as fixed value '2078'</msg>
<msg level="INFO" timestamp="20160916 15:57:00.080">Evaluating 'Generated Thumbnails For Channel 1 After 300 Seconds [2079]' &gt; '${NrOfThumbnails} [2078]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>2079</arg>
<arg>2078</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:00.086">Comparing evaluated keyword values</msg>
<status endtime="20160916 15:57:00.090" starttime="20160916 15:57:00.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:57:00.092">Requirement check on 'Generated Thumbnails For Channel 1 After 300 Seconds [2079] &gt; ${NrOfThumbnails} [2078]'</msg>
<msg level="INFO" timestamp="20160916 15:57:00.094">Generated Thumbnails For Channel 1 After 300 Seconds
        &gt;, 2079, 2078</msg>
<status endtime="20160916 15:57:00.095" starttime="20160916 15:51:59.814" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 15:57:00.097" starttime="20160916 15:51:50.856" status="PASS"></status>
</test>
<test name="Disable Closed Captioning Feature Channel 1" id="s1-s1-s1-s3-t9">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:00.161">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:57:00.160" starttime="20160916 15:57:00.122" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:03.498">Channel Confirm Error : Not active</msg>
<status endtime="20160916 15:57:03.503" starttime="20160916 15:57:00.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:57:03.507">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 15:57:03.506" starttime="20160916 15:57:00.115" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:57:03.572" starttime="20160916 15:57:03.526" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:57:03.574">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:57:03.576">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:57:03.577">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:03.583">Comparing as boolean values</msg>
<status endtime="20160916 15:57:03.586" starttime="20160916 15:57:03.580" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:57:03.589">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 15:57:03.592">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:57:03.593" starttime="20160916 15:57:03.510" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Closed Captioning">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:06.567">Warning pop-up Window found</msg>
<status endtime="20160916 15:57:06.572" starttime="20160916 15:57:03.596" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:06.581">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 15:57:06.646" starttime="20160916 15:57:06.595" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:57:06.649">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 15:57:06.652">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 15:57:06.653">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 15:57:06.660">Comparing as boolean values</msg>
<status endtime="20160916 15:57:06.664" starttime="20160916 15:57:06.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 15:57:06.666">Requirement check on 'is cc disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 15:57:06.667">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 15:57:06.669" starttime="20160916 15:57:06.576" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCcFiles} = shared_keywords.Generated Closed Captioning Files For Channel 1 After 900 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:12:06.682">Slept 15 minutes</msg>
<status endtime="20160916 16:12:06.691" starttime="20160916 15:57:06.678" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated ClosedCaptioningFiles For Channel">
<doc>Robot keyword: Get Number of Generated Closed Captioning Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:12:06.950">${NrOfFiles} = 103</msg>
<status endtime="20160916 16:12:06.950" starttime="20160916 16:12:06.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:12:06.958">${NrOfCcFiles} = 103</msg>
<status endtime="20160916 16:12:06.957" starttime="20160916 15:57:06.673" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Closed Captioning Files For Channel 1 After 900 Seconds</arg>
<arg>=</arg>
<arg>${NrOfCcFiles}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Closed Captioning Files For Channel 1 After 900 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:27:06.985">Slept 15 minutes</msg>
<status endtime="20160916 16:27:06.993" starttime="20160916 16:12:06.982" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated ClosedCaptioningFiles For Channel">
<doc>Robot keyword: Get Number of Generated Closed Captioning Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:27:07.252">${NrOfFiles} = 103</msg>
<status endtime="20160916 16:27:07.251" starttime="20160916 16:27:07.000" status="PASS"></status>
</kw>
<status endtime="20160916 16:27:07.262" starttime="20160916 16:12:06.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:27:07.265">'Generated Closed Captioning Files For Channel 1 After 900 Seconds' is '103'</msg>
<msg level="INFO" timestamp="20160916 16:27:07.269">Interpreting '${NrOfCcFiles}' as fixed value '103'</msg>
<msg level="INFO" timestamp="20160916 16:27:07.271">Evaluating 'Generated Closed Captioning Files For Channel 1 After 900 Seconds [103]' = '${NrOfCcFiles} [103]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>103</arg>
<arg>103</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:27:07.278">Comparing evaluated keyword values</msg>
<status endtime="20160916 16:27:07.282" starttime="20160916 16:27:07.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:27:07.285">Requirement check on 'Generated Closed Captioning Files For Channel 1 After 900 Seconds [103] = ${NrOfCcFiles} [103]'</msg>
<msg level="INFO" timestamp="20160916 16:27:07.286">Generated Closed Captioning Files For Channel 1 After 900 Seconds
        =, 103, 103</msg>
<status endtime="20160916 16:27:07.288" starttime="20160916 16:12:06.961" status="PASS"></status>
</kw>
<doc>Note: Make sure that the Media Player is streaming a file with Closed Captioning to the PC Detector.</doc>
<tags>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 16:27:07.290" starttime="20160916 15:57:00.106" status="PASS"></status>
</test>
<test name="Enable Closed Captioning Feature Channel 1" id="s1-s1-s1-s3-t10">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:27:07.423">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:27:07.422" starttime="20160916 16:27:07.363" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:27:10.768">Channel Confirm Error : Not active</msg>
<status endtime="20160916 16:27:10.770" starttime="20160916 16:27:07.432" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:27:10.775">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:27:10.773" starttime="20160916 16:27:07.357" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:27:10.821" starttime="20160916 16:27:10.798" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:27:10.824">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:27:10.827">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:27:10.829">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:27:10.835">Comparing as boolean values</msg>
<status endtime="20160916 16:27:10.839" starttime="20160916 16:27:10.831" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:27:10.843">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:27:10.845">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:27:10.846" starttime="20160916 16:27:10.780" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCcFiles} = shared_keywords.Generated Closed Captioning Files For Channel 1 After 900 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:42:10.861">Slept 15 minutes</msg>
<status endtime="20160916 16:42:10.873" starttime="20160916 16:27:10.858" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated ClosedCaptioningFiles For Channel">
<doc>Robot keyword: Get Number of Generated Closed Captioning Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:42:11.113">${NrOfFiles} = 103</msg>
<status endtime="20160916 16:42:11.111" starttime="20160916 16:42:10.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:42:11.125">${NrOfCcFiles} = 103</msg>
<status endtime="20160916 16:42:11.124" starttime="20160916 16:27:10.851" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Closed Captioning">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:42:14.167">Warning pop-up Window found</msg>
<status endtime="20160916 16:42:14.174" starttime="20160916 16:42:11.129" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:42:14.184">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:42:14.235" starttime="20160916 16:42:14.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:42:14.238">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:42:14.241">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:42:14.242">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:42:14.248">Comparing as boolean values</msg>
<status endtime="20160916 16:42:14.254" starttime="20160916 16:42:14.245" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:42:14.257">Requirement check on 'is cc enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:42:14.259">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:42:14.260" starttime="20160916 16:42:14.178" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Closed Captioning Files For Channel 1 After 900 Seconds</arg>
<arg>&gt;</arg>
<arg>${NrOfCcFiles}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Closed Captioning Files For Channel 1 After 900 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:14.295">Slept 15 minutes</msg>
<status endtime="20160916 16:57:14.303" starttime="20160916 16:42:14.292" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated ClosedCaptioningFiles For Channel">
<doc>Robot keyword: Get Number of Generated Closed Captioning Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:14.543">${NrOfFiles} = 103</msg>
<status endtime="20160916 16:57:14.542" starttime="20160916 16:57:14.308" status="PASS"></status>
</kw>
<status endtime="20160916 16:57:14.551" starttime="20160916 16:42:14.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:14.553">'Generated Closed Captioning Files For Channel 1 After 900 Seconds' is '103'</msg>
<msg level="INFO" timestamp="20160916 16:57:14.557">Interpreting '${NrOfCcFiles}' as fixed value '103'</msg>
<msg level="INFO" timestamp="20160916 16:57:14.558">Evaluating 'Generated Closed Captioning Files For Channel 1 After 900 Seconds [103]' &gt; '${NrOfCcFiles} [103]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>103</arg>
<arg>103</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:14.567">Comparing evaluated keyword values</msg>
<status endtime="20160916 16:57:14.572" starttime="20160916 16:57:14.562" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:14.574">Generated Closed Captioning Files For Channel 1 After 900 Seconds
        &gt;, 103, 103</msg>
<msg level="FAIL" timestamp="20160916 16:57:14.603">CheckFailed: Requirement check on 'Generated Closed Captioning Files For Channel 1 After 900 Seconds [103] &gt; ${NrOfCcFiles} [103]'</msg>
<msg level="INFO" timestamp="20160916 16:57:14.608">Saving screenshot Enable and Disable Features-Enable Closed Captioning Feature Channel 1-_20160916-16h57m14.607.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 16:57:14.869">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Enable Closed Captioning Feature Channel 1-_20160916-16h57m14.607.png"&gt;&lt;img src="Enable and Disable Features-Enable Closed Captioning Feature Channel 1-_20160916-16h57m14.607.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 16:57:14.605" starttime="20160916 16:42:14.264" status="FAIL"></status>
</kw>
<kw type="kw" name="${CcFile} = PCDetectorKeywords.Latest Closed Captioning File For Channel">
<doc>Robot keyword: Get Name of Last Closed Captioning File for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:15.250">${CcFile} = D:\civolution\Data\WcD07681609120600_01.srt</msg>
<status endtime="20160916 16:57:15.248" starttime="20160916 16:57:14.872" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Consistency Of Closed Captioning File</arg>
<arg>${CcFile}</arg>
<arg>${Verbose}</arg>
<arg>=</arg>
<arg>${OK}</arg>
</arguments>
<kw type="kw" name="closedcaptioningcheck.Consistency Of Closed Captioning File">
<doc>Robot keyword: Verify format of Closed Captioning file</doc>
<arguments>
<arg>${CcFile}</arg>
<arg>${Verbose}</arg>
</arguments>
<status endtime="20160916 16:57:15.549" starttime="20160916 16:57:15.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:15.551">'Consistency Of Closed Captioning File ${CcFile} ${Verbose}' is '0'</msg>
<msg level="INFO" timestamp="20160916 16:57:15.555">Interpreting '${OK}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160916 16:57:15.556">Evaluating 'Consistency Of Closed Captioning File ${CcFile} ${Verbose} [0]' = '${OK} [0]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:15.563">Comparing as integer values</msg>
<status endtime="20160916 16:57:15.567" starttime="20160916 16:57:15.559" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:15.569">Requirement check on 'Consistency Of Closed Captioning File ${CcFile} ${Verbose} [0] = ${OK} [0]'</msg>
<msg level="INFO" timestamp="20160916 16:57:15.571">Consistency Of Closed Captioning File, ${CcFile}, ${Verbose}
        =, 0, 0</msg>
<status endtime="20160916 16:57:15.572" starttime="20160916 16:57:15.258" status="PASS"></status>
</kw>
<doc>Note: Make sure that the Media Player is streaming a file with Closed Captioning to the PC Detector.</doc>
<tags>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 16:57:15.575" starttime="20160916 16:27:07.343" status="FAIL">CheckFailed: Requirement check on 'Generated Closed Captioning Files For Channel 1 After 900 Seconds [103] &gt; ${NrOfCcFiles} [103]'</status>
</test>
<test name="Enable VFP Streaming Feature Channel 1" id="s1-s1-s1-s3-t11">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:15.701">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:57:15.699" starttime="20160916 16:57:15.649" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:19.043">Channel Confirm Error : Not active</msg>
<status endtime="20160916 16:57:19.045" starttime="20160916 16:57:15.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:19.049">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:57:19.048" starttime="20160916 16:57:15.642" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:19.121" starttime="20160916 16:57:19.070" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:19.123">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:19.126">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:19.128">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:19.135">Comparing as boolean values</msg>
<status endtime="20160916 16:57:19.140" starttime="20160916 16:57:19.130" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:19.142">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:57:19.144">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:19.145" starttime="20160916 16:57:19.054" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:22.085">Warning pop-up Window found</msg>
<status endtime="20160916 16:57:22.092" starttime="20160916 16:57:19.148" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:22.103">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:22.161" starttime="20160916 16:57:22.121" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:22.163">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:22.166">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:22.168">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:22.176">Comparing as boolean values</msg>
<status endtime="20160916 16:57:22.179" starttime="20160916 16:57:22.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:22.181">Requirement check on 'is rt vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:57:22.182">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:22.183" starttime="20160916 16:57:22.096" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:25.168">Warning pop-up Window found</msg>
<status endtime="20160916 16:57:25.176" starttime="20160916 16:57:22.186" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:25.187">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:25.228" starttime="20160916 16:57:25.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:25.230">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:25.233">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:25.235">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:25.243">Comparing as boolean values</msg>
<status endtime="20160916 16:57:25.247" starttime="20160916 16:57:25.238" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:25.249">Requirement check on 'is rt vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:57:25.251">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:25.252" starttime="20160916 16:57:25.181" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 16:57:25.254" starttime="20160916 16:57:15.633" status="PASS"></status>
</test>
<test name="Enable AFP Streaming Feature Channel 1" id="s1-s1-s1-s3-t12">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:25.322">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:57:25.321" starttime="20160916 16:57:25.284" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:28.660">Channel Confirm Error : Not active</msg>
<status endtime="20160916 16:57:28.666" starttime="20160916 16:57:25.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:28.670">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:57:28.669" starttime="20160916 16:57:25.278" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:28.736" starttime="20160916 16:57:28.690" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:28.738">'is rt afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:28.742">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:28.744">Evaluating 'is rt afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:28.750">Comparing as boolean values</msg>
<status endtime="20160916 16:57:28.754" starttime="20160916 16:57:28.747" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:28.755">Precondition check on 'is rt afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:57:28.757">Is Rt Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:28.758" starttime="20160916 16:57:28.673" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Afp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:31.713">Warning pop-up Window found</msg>
<status endtime="20160916 16:57:31.721" starttime="20160916 16:57:28.761" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:31.731">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:31.849" starttime="20160916 16:57:31.747" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:31.851">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:31.854">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:31.855">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:31.861">Comparing as boolean values</msg>
<status endtime="20160916 16:57:31.865" starttime="20160916 16:57:31.858" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:31.866">Requirement check on 'is rt afp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:57:31.868">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:31.869" starttime="20160916 16:57:31.724" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:35.018">Warning pop-up Window found</msg>
<status endtime="20160916 16:57:35.024" starttime="20160916 16:57:31.872" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:35.037">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:35.098" starttime="20160916 16:57:35.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:35.100">'is rt afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:35.103">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:35.104">Evaluating 'is rt afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:35.109">Comparing as boolean values</msg>
<status endtime="20160916 16:57:35.113" starttime="20160916 16:57:35.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:35.116">Requirement check on 'is rt afp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:57:35.119">Is Rt Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:35.120" starttime="20160916 16:57:35.031" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 16:57:35.122" starttime="20160916 16:57:25.267" status="PASS"></status>
</test>
<test name="Enable Closed Captioning Streaming Feature Channel 1" id="s1-s1-s1-s3-t13">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:35.185">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:57:35.183" starttime="20160916 16:57:35.149" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:38.522">Channel Confirm Error : Not active</msg>
<status endtime="20160916 16:57:38.523" starttime="20160916 16:57:35.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:38.527">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:57:38.526" starttime="20160916 16:57:35.142" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:38.601" starttime="20160916 16:57:38.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:38.603">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:38.606">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:38.608">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:38.613">Comparing as boolean values</msg>
<status endtime="20160916 16:57:38.617" starttime="20160916 16:57:38.610" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:38.620">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:57:38.622">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:38.624" starttime="20160916 16:57:38.531" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Cc Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:41.571">Warning pop-up Window found</msg>
<status endtime="20160916 16:57:41.575" starttime="20160916 16:57:38.627" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:41.584">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:41.646" starttime="20160916 16:57:41.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:41.648">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:41.651">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:41.652">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:41.659">Comparing as boolean values</msg>
<status endtime="20160916 16:57:41.663" starttime="20160916 16:57:41.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:41.664">Requirement check on 'is rt cc disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:57:41.666">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:41.668" starttime="20160916 16:57:41.579" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Cc Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:44.673">Warning pop-up Window found</msg>
<status endtime="20160916 16:57:44.678" starttime="20160916 16:57:41.671" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:44.686">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:57:44.720" starttime="20160916 16:57:44.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:44.722">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:57:44.726">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:57:44.728">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:44.734">Comparing as boolean values</msg>
<status endtime="20160916 16:57:44.737" starttime="20160916 16:57:44.731" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:57:44.739">Requirement check on 'is rt cc enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:57:44.740">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:57:44.742" starttime="20160916 16:57:44.681" status="PASS"></status>
</kw>
<doc>Note: Make sure that the Media Player is streaming a file with Closed Captioning to the PC Detector.</doc>
<tags>
<tag>osprey</tag>
<tag>ospreyWithoutAudio</tag>
</tags>
<status critical="yes" endtime="20160916 16:57:44.744" starttime="20160916 16:57:35.131" status="PASS"></status>
</test>
<test name="Enable VFP Features Channel 1, License Does Not Support VFP Feature" id="s1-s1-s1-s3-t14">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_VFP_RTVFP}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:57:50.105">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 16:57:50.112" starttime="20160916 16:57:44.774" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:58:05.128">Slept 15 seconds</msg>
<status endtime="20160916 16:58:05.128" starttime="20160916 16:57:50.116" status="PASS"></status>
</kw>
<status endtime="20160916 16:58:05.128" starttime="20160916 16:57:44.768" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:58:05.175">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_VFP_RTVFP.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 16:58:05.175" starttime="20160916 16:58:05.128" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:58:20.182">Slept 15 seconds</msg>
<status endtime="20160916 16:58:20.182" starttime="20160916 16:58:05.175" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 16:58:20.260" starttime="20160916 16:58:20.182" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:58:35.260">Slept 15 seconds</msg>
<status endtime="20160916 16:58:35.261" starttime="20160916 16:58:20.260" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:08.550">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 16:59:08.556" starttime="20160916 16:58:35.261" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:23.563">Slept 15 seconds</msg>
<status endtime="20160916 16:59:23.565" starttime="20160916 16:59:08.560" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:25.405">[log] CLICK on L(126,33)@S(0)[0,0 1280x1024]
[log] CLICK on L(993,34)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 16:59:25.411" starttime="20160916 16:59:23.570" status="PASS"></status>
</kw>
<status endtime="20160916 16:59:25.413" starttime="20160916 16:58:35.261" status="PASS"></status>
</kw>
<status endtime="20160916 16:59:25.416" starttime="20160916 16:58:05.175" status="PASS"></status>
</kw>
<status endtime="20160916 16:59:25.418" starttime="20160916 16:57:44.762" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:25.620">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:59:25.619" starttime="20160916 16:59:25.432" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:28.961">Channel Confirm Error : Not active</msg>
<status endtime="20160916 16:59:28.967" starttime="20160916 16:59:25.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:28.973">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 16:59:28.971" starttime="20160916 16:59:25.422" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.012" starttime="20160916 16:59:28.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.014">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.017">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.018">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.024">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.029" starttime="20160916 16:59:29.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.031">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.033">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.034" starttime="20160916 16:59:28.976" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.074" starttime="20160916 16:59:29.051" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.076">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.078">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.079">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.084">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.087" starttime="20160916 16:59:29.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.088">Precondition check on 'is vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.089">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.091" starttime="20160916 16:59:29.037" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.130" starttime="20160916 16:59:29.108" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.132">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.135">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.136">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.141">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.143" starttime="20160916 16:59:29.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.145">Precondition check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.146">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.147" starttime="20160916 16:59:29.093" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.185" starttime="20160916 16:59:29.165" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.187">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.202">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.203">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.207">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.211" starttime="20160916 16:59:29.205" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.213">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.214">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.215" starttime="20160916 16:59:29.150" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.252" starttime="20160916 16:59:29.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.254">'is rt afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.256">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.257">Evaluating 'is rt afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.264">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.266" starttime="20160916 16:59:29.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.268">Precondition check on 'is rt afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.270">Is Rt Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.271" starttime="20160916 16:59:29.218" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.310" starttime="20160916 16:59:29.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.312">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.315">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.316">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.321">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.323" starttime="20160916 16:59:29.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.325">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.326">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.327" starttime="20160916 16:59:29.274" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.369" starttime="20160916 16:59:29.346" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.371">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.374">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.375">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.380">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.382" starttime="20160916 16:59:29.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.384">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.385">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.386" starttime="20160916 16:59:29.332" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:29.427" starttime="20160916 16:59:29.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.430">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.433">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:29.434">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:29.439">Comparing as boolean values</msg>
<status endtime="20160916 16:59:29.442" starttime="20160916 16:59:29.437" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:29.443">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:29.444">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:29.445" starttime="20160916 16:59:29.389" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:33.840">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 16:59:33.846" starttime="20160916 16:59:29.448" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:37.651">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 16:59:37.656" starttime="20160916 16:59:33.849" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:38.155">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<msg level="INFO" timestamp="20160916 16:59:38.162">${NrOfCecoFiles} = 926</msg>
<status endtime="20160916 16:59:38.160" starttime="20160916 16:59:37.660" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:38.172">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:38.212" starttime="20160916 16:59:38.185" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:38.215">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:38.218">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:38.219">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:38.225">Comparing as boolean values</msg>
<status endtime="20160916 16:59:38.229" starttime="20160916 16:59:38.222" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:38.230">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 16:59:38.232">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:38.233" starttime="20160916 16:59:38.165" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 16:59:38.273" starttime="20160916 16:59:38.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:38.275">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 16:59:38.278">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 16:59:38.279">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:38.284">Comparing as boolean values</msg>
<status endtime="20160916 16:59:38.287" starttime="20160916 16:59:38.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:38.289">Requirement check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 16:59:38.290">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 16:59:38.291" starttime="20160916 16:59:38.236" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:38.298">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:38.795">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 16:59:38.800" starttime="20160916 16:59:38.313" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:38.802">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:38.807">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:38.808">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:38.813">Comparing evaluated keyword values</msg>
<status endtime="20160916 16:59:38.816" starttime="20160916 16:59:38.811" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:44.260">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 16:59:44.265" starttime="20160916 16:59:43.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:44.267">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:44.271">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:44.272">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:44.277">Comparing evaluated keyword values</msg>
<status endtime="20160916 16:59:44.282" starttime="20160916 16:59:44.274" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:49.788">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 16:59:49.795" starttime="20160916 16:59:49.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:49.797">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:49.801">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:49.802">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:49.806">Comparing evaluated keyword values</msg>
<status endtime="20160916 16:59:49.809" starttime="20160916 16:59:49.804" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:55.271">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 16:59:55.276" starttime="20160916 16:59:54.815" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 16:59:55.278">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:55.281">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 16:59:55.282">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 16:59:55.287">Comparing evaluated keyword values</msg>
<status endtime="20160916 16:59:55.291" starttime="20160916 16:59:55.284" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:00:00.768">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:00:00.774" starttime="20160916 17:00:00.297" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:00:00.776">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:00:00.779">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:00:00.781">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:00:00.786">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:00:00.790" starttime="20160916 17:00:00.784" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:00:21.744">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:00:21.750" starttime="20160916 17:00:21.294" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:00:21.751">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:00:21.754">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:00:21.755">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:00:21.759">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:00:21.763" starttime="20160916 17:00:21.757" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:00:42.695">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:00:42.701" starttime="20160916 17:00:42.240" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:00:42.703">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:00:42.706">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:00:42.707">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:00:42.712">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:00:42.715" starttime="20160916 17:00:42.710" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:01:03.665">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:01:03.670" starttime="20160916 17:01:03.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:01:03.671">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:01:03.675">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:01:03.676">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:01:03.681">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:01:03.684" starttime="20160916 17:01:03.678" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:01:24.641">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:01:24.664" starttime="20160916 17:01:24.179" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:01:24.665">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:01:24.669">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:01:24.671">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:01:24.675">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:01:24.679" starttime="20160916 17:01:24.673" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:01:45.652">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:01:45.654" starttime="20160916 17:01:45.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:01:45.656">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:01:45.659">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:01:45.660">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:01:45.666">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:01:45.670" starttime="20160916 17:01:45.663" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:02:06.613">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:02:06.614" starttime="20160916 17:02:06.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:02:06.616">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:02:06.620">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:02:06.622">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:02:06.626">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:02:06.629" starttime="20160916 17:02:06.624" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:02:27.586">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:02:27.589" starttime="20160916 17:02:27.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:02:27.591">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:02:27.596">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:02:27.597">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:02:27.602">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:02:27.607" starttime="20160916 17:02:27.599" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:02:48.586">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:02:48.588" starttime="20160916 17:02:48.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:02:48.590">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:02:48.596">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:02:48.597">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:02:48.602">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:02:48.605" starttime="20160916 17:02:48.600" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:03:09.599">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:03:09.600" starttime="20160916 17:03:09.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:03:09.601">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:03:09.605">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:03:09.606">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:03:09.610">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:03:09.614" starttime="20160916 17:03:09.608" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:03:30.613">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:03:30.614" starttime="20160916 17:03:30.135" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:03:30.616">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:03:30.620">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:03:30.622">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:03:30.626">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:03:30.630" starttime="20160916 17:03:30.624" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:03:51.606">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:03:51.608" starttime="20160916 17:03:51.134" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:03:51.610">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:03:51.613">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:03:51.614">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:03:51.620">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:03:51.624" starttime="20160916 17:03:51.617" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:12.579">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:04:12.581" starttime="20160916 17:04:12.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:04:12.582">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:04:12.586">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:04:12.587">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:12.592">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:04:12.595" starttime="20160916 17:04:12.589" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:33.564">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:04:33.566" starttime="20160916 17:04:33.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:04:33.568">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:04:33.572">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:04:33.574">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:33.578">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:04:33.582" starttime="20160916 17:04:33.576" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:39.048">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<status endtime="20160916 17:04:39.049" starttime="20160916 17:04:38.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:04:39.052">'Generated Ceco Files For Channel 1' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:04:39.055">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:04:39.056">Evaluating 'Generated Ceco Files For Channel 1 [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:39.061">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:04:39.065" starttime="20160916 17:04:39.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:04:39.067">Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926
        Generated CecoFiles For Channel, 1
        &gt;, 926, 926</msg>
<msg level="FAIL" timestamp="20160916 17:04:39.071">CheckFailed: Requirement check on 'Generated Ceco Files For Channel 1 [926] &gt; ${NrOfCecoFiles} [926]' after 300 sec</msg>
<msg level="INFO" timestamp="20160916 17:04:39.076">Saving screenshot Enable and Disable Features-Enable VFP Features Channel 1, License Does Not Support VFP Feature-_20160916-17h04m39.075.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 17:04:39.329">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Enable VFP Features Channel 1, License Does Not Support VFP Feature-_20160916-17h04m39.075.png"&gt;&lt;img src="Enable and Disable Features-Enable VFP Features Channel 1, License Does Not Support VFP Feature-_20160916-17h04m39.075.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 17:04:39.073" starttime="20160916 16:59:38.293" status="FAIL"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:44.399">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:04:44.411" starttime="20160916 17:04:39.344" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:59.419">Slept 15 seconds</msg>
<status endtime="20160916 17:04:59.420" starttime="20160916 17:04:44.415" status="PASS"></status>
</kw>
<status endtime="20160916 17:04:59.420" starttime="20160916 17:04:39.338" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:04:59.436">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 17:04:59.436" starttime="20160916 17:04:59.420" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:05:14.451">Slept 15 seconds</msg>
<status endtime="20160916 17:05:14.452" starttime="20160916 17:04:59.451" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:05:14.467" starttime="20160916 17:05:14.452" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:05:29.483">Slept 15 seconds</msg>
<status endtime="20160916 17:05:29.485" starttime="20160916 17:05:14.467" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:06:02.649">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:06:02.655" starttime="20160916 17:05:29.485" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:06:17.662">Slept 15 seconds</msg>
<status endtime="20160916 17:06:17.664" starttime="20160916 17:06:02.659" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:06:19.582">[log] CLICK on L(346,253)@S(0)[0,0 1280x1024]
[log] CLICK on L(1213,254)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:06:19.590" starttime="20160916 17:06:17.671" status="PASS"></status>
</kw>
<status endtime="20160916 17:06:19.594" starttime="20160916 17:05:29.485" status="PASS"></status>
</kw>
<status endtime="20160916 17:06:19.596" starttime="20160916 17:04:59.451" status="PASS"></status>
</kw>
<status endtime="20160916 17:06:19.598" starttime="20160916 17:04:39.330" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:06:19.603" starttime="20160916 16:57:44.753" status="FAIL">CheckFailed: Requirement check on 'Generated Ceco Files For Channel 1 [926] &gt; ${NrOfCecoFiles} [926]' after 300 sec</status>
</test>
<test name="Enable AFP Features Channel 1, License Does Not Support AFP Feature" id="s1-s1-s1-s3-t15">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_AFP_RTAFP}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:06:23.442">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:06:23.449" starttime="20160916 17:06:19.634" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:06:38.457">Slept 15 seconds</msg>
<status endtime="20160916 17:06:38.459" starttime="20160916 17:06:23.453" status="PASS"></status>
</kw>
<status endtime="20160916 17:06:38.459" starttime="20160916 17:06:19.628" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:06:38.490">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_AFP_RTAFP.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 17:06:38.490" starttime="20160916 17:06:38.459" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:06:53.513">Slept 15 seconds</msg>
<status endtime="20160916 17:06:53.513" starttime="20160916 17:06:38.490" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:06:53.528" starttime="20160916 17:06:53.513" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:07:08.529">Slept 15 seconds</msg>
<status endtime="20160916 17:07:08.531" starttime="20160916 17:06:53.528" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:07:41.746">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:07:41.753" starttime="20160916 17:07:08.531" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:07:56.759">Slept 15 seconds</msg>
<status endtime="20160916 17:07:56.761" starttime="20160916 17:07:41.757" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:07:58.656">[log] CLICK on L(324,231)@S(0)[0,0 1280x1024]
[log] CLICK on L(1191,232)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:07:58.662" starttime="20160916 17:07:56.764" status="PASS"></status>
</kw>
<status endtime="20160916 17:07:58.664" starttime="20160916 17:07:08.531" status="PASS"></status>
</kw>
<status endtime="20160916 17:07:58.673" starttime="20160916 17:06:38.490" status="PASS"></status>
</kw>
<status endtime="20160916 17:07:58.676" starttime="20160916 17:06:19.622" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:07:58.801">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:07:58.799" starttime="20160916 17:07:58.687" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.139">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:08:02.144" starttime="20160916 17:07:58.805" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.149">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:08:02.147" starttime="20160916 17:07:58.681" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.189" starttime="20160916 17:08:02.166" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.190">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.193">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.194">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.198">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.204" starttime="20160916 17:08:02.196" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.206">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.208">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.209" starttime="20160916 17:08:02.152" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.247" starttime="20160916 17:08:02.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.249">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.252">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.253">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.257">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.259" starttime="20160916 17:08:02.255" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.261">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.262">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.263" starttime="20160916 17:08:02.212" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.300" starttime="20160916 17:08:02.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.301">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.305">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.307">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.312">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.314" starttime="20160916 17:08:02.310" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.316">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.318">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.319" starttime="20160916 17:08:02.266" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.361" starttime="20160916 17:08:02.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.366">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.369">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.371">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.377">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.381" starttime="20160916 17:08:02.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.382">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.383">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.384" starttime="20160916 17:08:02.321" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.422" starttime="20160916 17:08:02.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.424">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.426">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.427">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.431">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.434" starttime="20160916 17:08:02.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.435">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.437">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.439" starttime="20160916 17:08:02.387" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.475" starttime="20160916 17:08:02.455" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.477">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.479">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.480">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.485">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.487" starttime="20160916 17:08:02.483" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.488">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.490">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.491" starttime="20160916 17:08:02.442" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.526" starttime="20160916 17:08:02.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.528">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.531">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.532">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.536">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.540" starttime="20160916 17:08:02.534" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.542">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.543">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.544" starttime="20160916 17:08:02.493" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:02.582" starttime="20160916 17:08:02.560" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.585">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.588">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:02.589">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:02.593">Comparing as boolean values</msg>
<status endtime="20160916 17:08:02.595" starttime="20160916 17:08:02.591" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:02.597">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:02.598">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:02.599" starttime="20160916 17:08:02.547" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:06.896">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:08:06.906" starttime="20160916 17:08:02.601" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:11.270">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:08:11.274" starttime="20160916 17:08:06.915" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 20 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:31.288">Slept 20 seconds</msg>
<status endtime="20160916 17:08:31.290" starttime="20160916 17:08:11.285" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:31.770">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<msg level="INFO" timestamp="20160916 17:08:31.775">${NrOfFiles} = 926</msg>
<status endtime="20160916 17:08:31.774" starttime="20160916 17:08:31.293" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:31.779">${NrOfCecoFiles} = 926</msg>
<status endtime="20160916 17:08:31.778" starttime="20160916 17:08:11.279" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:31.786">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:31.819" starttime="20160916 17:08:31.797" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:31.821">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:31.823">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:31.824">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:31.829">Comparing as boolean values</msg>
<status endtime="20160916 17:08:31.832" starttime="20160916 17:08:31.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:31.835">Requirement check on 'is afp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 17:08:31.837">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:31.838" starttime="20160916 17:08:31.782" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:08:31.875" starttime="20160916 17:08:31.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:31.876">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:08:31.879">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:08:31.880">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:08:31.885">Comparing as boolean values</msg>
<status endtime="20160916 17:08:31.887" starttime="20160916 17:08:31.883" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:08:31.889">Requirement check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:08:31.890">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:08:31.891" starttime="20160916 17:08:31.840" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel 1 After 120 Seconds</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:10:31.917">Slept 2 minutes</msg>
<status endtime="20160916 17:10:31.924" starttime="20160916 17:08:31.914" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:10:32.431">Latest Ceco file:  D:\civolution\Data\WcD07681609161446_01.ce</msg>
<msg level="INFO" timestamp="20160916 17:10:32.440">${NrOfFiles} = 926</msg>
<status endtime="20160916 17:10:32.439" starttime="20160916 17:10:31.930" status="PASS"></status>
</kw>
<status endtime="20160916 17:10:32.443" starttime="20160916 17:08:31.908" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:10:32.445">'Generated Ceco Files For Channel 1 After 120 Seconds' is '926'</msg>
<msg level="INFO" timestamp="20160916 17:10:32.448">Interpreting '${NrOfCecoFiles}' as fixed value '926'</msg>
<msg level="INFO" timestamp="20160916 17:10:32.449">Evaluating 'Generated Ceco Files For Channel 1 After 120 Seconds [926]' &gt; '${NrOfCecoFiles} [926]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>926</arg>
<arg>926</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:10:32.454">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:10:32.457" starttime="20160916 17:10:32.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:10:32.459">Generated Ceco Files For Channel 1 After 120 Seconds
        &gt;, 926, 926</msg>
<msg level="FAIL" timestamp="20160916 17:10:32.461">CheckFailed: Requirement check on 'Generated Ceco Files For Channel 1 After 120 Seconds [926] &gt; ${NrOfCecoFiles} [926]'</msg>
<msg level="INFO" timestamp="20160916 17:10:32.464">Saving screenshot Enable and Disable Features-Enable AFP Features Channel 1, License Does Not Support AFP Feature-_20160916-17h10m32.464.png</msg>
<msg level="INFO" html="yes" timestamp="20160916 17:10:32.698">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Enable AFP Features Channel 1, License Does Not Support AFP Feature-_20160916-17h10m32.464.png"&gt;&lt;img src="Enable and Disable Features-Enable AFP Features Channel 1, License Does Not Support AFP Feature-_20160916-17h10m32.464.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160916 17:10:32.462" starttime="20160916 17:08:31.894" status="FAIL"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:10:37.510">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:10:37.516" starttime="20160916 17:10:32.712" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:10:52.524">Slept 15 seconds</msg>
<status endtime="20160916 17:10:52.526" starttime="20160916 17:10:37.521" status="PASS"></status>
</kw>
<status endtime="20160916 17:10:52.526" starttime="20160916 17:10:32.707" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:10:52.526">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 17:10:52.526" starttime="20160916 17:10:52.526" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:11:07.548">Slept 15 seconds</msg>
<status endtime="20160916 17:11:07.548" starttime="20160916 17:10:52.541" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:11:07.564" starttime="20160916 17:11:07.548" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:11:22.571">Slept 15 seconds</msg>
<status endtime="20160916 17:11:22.571" starttime="20160916 17:11:07.564" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:11:55.907">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:11:55.913" starttime="20160916 17:11:22.571" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:12:10.923">Slept 15 seconds</msg>
<status endtime="20160916 17:12:10.924" starttime="20160916 17:11:55.919" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:12:12.768">[log] CLICK on L(280,187)@S(0)[0,0 1280x1024]
[log] CLICK on L(1147,188)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:12:12.774" starttime="20160916 17:12:10.928" status="PASS"></status>
</kw>
<status endtime="20160916 17:12:12.776" starttime="20160916 17:11:22.571" status="PASS"></status>
</kw>
<status endtime="20160916 17:12:12.778" starttime="20160916 17:10:52.541" status="PASS"></status>
</kw>
<status endtime="20160916 17:12:12.781" starttime="20160916 17:10:32.700" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:12:12.785" starttime="20160916 17:06:19.613" status="FAIL">CheckFailed: Requirement check on 'Generated Ceco Files For Channel 1 After 120 Seconds [926] &gt; ${NrOfCecoFiles} [926]'</status>
</test>
<test name="Enable Closed Captioning Feature Channel 1, License Does Not Support CC Feature" id="s1-s1-s1-s3-t16">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_CC_RTCC}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:12:17.855">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:12:17.860" starttime="20160916 17:12:12.813" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:12:32.867">Slept 15 seconds</msg>
<status endtime="20160916 17:12:32.869" starttime="20160916 17:12:17.863" status="PASS"></status>
</kw>
<status endtime="20160916 17:12:32.869" starttime="20160916 17:12:12.808" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:12:32.916">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_CC_RTCC.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 17:12:32.916" starttime="20160916 17:12:32.869" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:12:47.939">Slept 15 seconds</msg>
<status endtime="20160916 17:12:47.939" starttime="20160916 17:12:32.932" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:12:47.954" starttime="20160916 17:12:47.939" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:02.954">Slept 15 seconds</msg>
<status endtime="20160916 17:13:02.955" starttime="20160916 17:12:47.954" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:36.053">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:13:36.065" starttime="20160916 17:13:02.955" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:51.077">Slept 15 seconds</msg>
<status endtime="20160916 17:13:51.079" starttime="20160916 17:13:36.074" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:52.928">[log] CLICK on L(236,143)@S(0)[0,0 1280x1024]
[log] CLICK on L(1103,144)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:13:52.937" starttime="20160916 17:13:51.083" status="PASS"></status>
</kw>
<status endtime="20160916 17:13:52.939" starttime="20160916 17:13:02.955" status="PASS"></status>
</kw>
<status endtime="20160916 17:13:52.942" starttime="20160916 17:12:32.916" status="PASS"></status>
</kw>
<status endtime="20160916 17:13:52.949" starttime="20160916 17:12:12.803" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:53.139">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:13:53.138" starttime="20160916 17:13:52.960" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.477">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:13:56.479" starttime="20160916 17:13:53.144" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.483">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:13:56.481" starttime="20160916 17:13:52.954" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.522" starttime="20160916 17:13:56.500" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.524">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.527">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.528">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.540">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.546" starttime="20160916 17:13:56.530" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.548">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.550">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.551" starttime="20160916 17:13:56.486" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.591" starttime="20160916 17:13:56.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.593">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.595">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.596">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.601">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.605" starttime="20160916 17:13:56.598" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.607">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.608">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.609" starttime="20160916 17:13:56.554" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.647" starttime="20160916 17:13:56.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.649">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.652">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.653">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.659">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.661" starttime="20160916 17:13:56.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.663">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.664">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.665" starttime="20160916 17:13:56.612" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.701" starttime="20160916 17:13:56.682" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.704">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.707">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.708">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.713">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.715" starttime="20160916 17:13:56.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.716">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.717">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.718" starttime="20160916 17:13:56.668" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.755" starttime="20160916 17:13:56.734" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.757">'is rt afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.760">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.761">Evaluating 'is rt afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.765">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.768" starttime="20160916 17:13:56.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.770">Precondition check on 'is rt afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.772">Is Rt Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.773" starttime="20160916 17:13:56.721" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.814" starttime="20160916 17:13:56.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.816">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.819">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.820">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.825">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.827" starttime="20160916 17:13:56.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.829">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.830">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.831" starttime="20160916 17:13:56.776" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.875" starttime="20160916 17:13:56.847" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.880">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.883">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.885">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.889">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.893" starttime="20160916 17:13:56.887" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.894">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.896">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.897" starttime="20160916 17:13:56.834" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:13:56.933" starttime="20160916 17:13:56.914" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.936">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.940">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:13:56.941">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:13:56.946">Comparing as boolean values</msg>
<status endtime="20160916 17:13:56.948" starttime="20160916 17:13:56.943" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:13:56.949">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:13:56.951">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:13:56.952" starttime="20160916 17:13:56.899" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Closed Captioning">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:14:00.762">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:14:00.767" starttime="20160916 17:13:56.955" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Cc Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:14:05.204">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:14:05.209" starttime="20160916 17:14:00.772" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCcFiles} = shared_keywords.Generated Closed Captioning Files For Channel 1 After 20 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:14:25.227">Slept 20 seconds</msg>
<status endtime="20160916 17:14:25.229" starttime="20160916 17:14:05.223" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated ClosedCaptioningFiles For Channel">
<doc>Robot keyword: Get Number of Generated Closed Captioning Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:14:25.444">${NrOfFiles} = 103</msg>
<status endtime="20160916 17:14:25.443" starttime="20160916 17:14:25.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:14:25.452">${NrOfCcFiles} = 103</msg>
<status endtime="20160916 17:14:25.451" starttime="20160916 17:14:05.216" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:14:25.460">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:14:25.496" starttime="20160916 17:14:25.474" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:14:25.498">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:14:25.503">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:14:25.504">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:14:25.509">Comparing as boolean values</msg>
<status endtime="20160916 17:14:25.513" starttime="20160916 17:14:25.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:14:25.515">Requirement check on 'is cc disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 17:14:25.516">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:14:25.517" starttime="20160916 17:14:25.455" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:14:25.555" starttime="20160916 17:14:25.535" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:14:25.557">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:14:25.559">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:14:25.560">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:14:25.567">Comparing as boolean values</msg>
<status endtime="20160916 17:14:25.570" starttime="20160916 17:14:25.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:14:25.572">Requirement check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:14:25.573">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:14:25.574" starttime="20160916 17:14:25.520" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Closed Captioning Files For Channel 1 After 900 Seconds</arg>
<arg>=</arg>
<arg>${NrOfCcFiles}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Closed Captioning Files For Channel 1 After 900 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:29:25.598">Slept 15 minutes</msg>
<status endtime="20160916 17:29:25.610" starttime="20160916 17:14:25.595" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated ClosedCaptioningFiles For Channel">
<doc>Robot keyword: Get Number of Generated Closed Captioning Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:29:25.856">${NrOfFiles} = 103</msg>
<status endtime="20160916 17:29:25.856" starttime="20160916 17:29:25.618" status="PASS"></status>
</kw>
<status endtime="20160916 17:29:25.866" starttime="20160916 17:14:25.590" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:29:25.868">'Generated Closed Captioning Files For Channel 1 After 900 Seconds' is '103'</msg>
<msg level="INFO" timestamp="20160916 17:29:25.872">Interpreting '${NrOfCcFiles}' as fixed value '103'</msg>
<msg level="INFO" timestamp="20160916 17:29:25.874">Evaluating 'Generated Closed Captioning Files For Channel 1 After 900 Seconds [103]' = '${NrOfCcFiles} [103]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>103</arg>
<arg>103</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:29:25.884">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:29:25.889" starttime="20160916 17:29:25.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:29:25.891">Requirement check on 'Generated Closed Captioning Files For Channel 1 After 900 Seconds [103] = ${NrOfCcFiles} [103]'</msg>
<msg level="INFO" timestamp="20160916 17:29:25.892">Generated Closed Captioning Files For Channel 1 After 900 Seconds
        =, 103, 103</msg>
<status endtime="20160916 17:29:25.894" starttime="20160916 17:14:25.577" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:29:30.785">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:29:30.792" starttime="20160916 17:29:25.914" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:29:45.802">Slept 15 seconds</msg>
<status endtime="20160916 17:29:45.804" starttime="20160916 17:29:30.797" status="PASS"></status>
</kw>
<status endtime="20160916 17:29:45.804" starttime="20160916 17:29:25.904" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:29:45.804">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 17:29:45.804" starttime="20160916 17:29:45.804" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:30:00.827">Slept 15 seconds</msg>
<status endtime="20160916 17:30:00.827" starttime="20160916 17:29:45.820" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:30:00.843" starttime="20160916 17:30:00.827" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:30:15.858">Slept 15 seconds</msg>
<status endtime="20160916 17:30:15.859" starttime="20160916 17:30:00.843" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:30:49.025">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:30:49.031" starttime="20160916 17:30:15.859" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:31:04.039">Slept 15 seconds</msg>
<status endtime="20160916 17:31:04.041" starttime="20160916 17:30:49.035" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:31:05.881">[log] CLICK on L(192,99)@S(0)[0,0 1280x1024]
[log] CLICK on L(1059,100)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:31:05.886" starttime="20160916 17:31:04.045" status="PASS"></status>
</kw>
<status endtime="20160916 17:31:05.889" starttime="20160916 17:30:15.859" status="PASS"></status>
</kw>
<status endtime="20160916 17:31:05.892" starttime="20160916 17:29:45.820" status="PASS"></status>
</kw>
<status endtime="20160916 17:31:05.895" starttime="20160916 17:29:25.896" status="PASS"></status>
</kw>
<doc>Note: Make sure that the Media Player is streaming a file with Closed Captioning to the PC Detector.</doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:31:05.898" starttime="20160916 17:12:12.793" status="PASS"></status>
</test>
<test name="Enable Thumbnail Capturing Feature Channel 1-Osprey, License Does Not Support Thumbnail Feature" id="s1-s1-s1-s3-t17">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_Thumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:31:11.194">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:31:11.203" starttime="20160916 17:31:05.937" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:31:26.212">Slept 15 seconds</msg>
<status endtime="20160916 17:31:26.213" starttime="20160916 17:31:11.207" status="PASS"></status>
</kw>
<status endtime="20160916 17:31:26.213" starttime="20160916 17:31:05.930" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:31:26.244">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_Thumbnails.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 17:31:26.244" starttime="20160916 17:31:26.213" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:31:41.260">Slept 15 seconds</msg>
<status endtime="20160916 17:31:41.262" starttime="20160916 17:31:26.260" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:31:41.278" starttime="20160916 17:31:41.262" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:31:56.278">Slept 15 seconds</msg>
<status endtime="20160916 17:31:56.280" starttime="20160916 17:31:41.278" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:29.390">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:32:29.396" starttime="20160916 17:31:56.280" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:44.406">Slept 15 seconds</msg>
<status endtime="20160916 17:32:44.408" starttime="20160916 17:32:29.401" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:46.256">[log] CLICK on L(148,55)@S(0)[0,0 1280x1024]
[log] CLICK on L(1015,56)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:32:46.262" starttime="20160916 17:32:44.413" status="PASS"></status>
</kw>
<status endtime="20160916 17:32:46.267" starttime="20160916 17:31:56.280" status="PASS"></status>
</kw>
<status endtime="20160916 17:32:46.269" starttime="20160916 17:31:26.244" status="PASS"></status>
</kw>
<status endtime="20160916 17:32:46.278" starttime="20160916 17:31:05.923" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:46.469">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:32:46.467" starttime="20160916 17:32:46.294" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:49.810">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:32:49.817" starttime="20160916 17:32:46.474" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:49.822">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:32:49.820" starttime="20160916 17:32:46.286" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:49.867" starttime="20160916 17:32:49.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:49.869">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:49.872">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:49.873">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:49.882">Comparing as boolean values</msg>
<status endtime="20160916 17:32:49.886" starttime="20160916 17:32:49.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:49.889">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:49.890">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:49.892" starttime="20160916 17:32:49.826" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:49.935" starttime="20160916 17:32:49.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:49.937">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:49.940">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:49.942">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:49.950">Comparing as boolean values</msg>
<status endtime="20160916 17:32:49.954" starttime="20160916 17:32:49.947" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:49.955">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:49.957">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:49.958" starttime="20160916 17:32:49.895" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:49.999" starttime="20160916 17:32:49.977" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.002">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.004">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:50.005">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:50.013">Comparing as boolean values</msg>
<status endtime="20160916 17:32:50.016" starttime="20160916 17:32:50.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.018">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.019">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:50.020" starttime="20160916 17:32:49.961" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:50.066" starttime="20160916 17:32:50.038" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.072">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.076">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:50.078">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:50.085">Comparing as boolean values</msg>
<status endtime="20160916 17:32:50.089" starttime="20160916 17:32:50.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.091">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.093">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:50.094" starttime="20160916 17:32:50.023" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:50.134" starttime="20160916 17:32:50.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.136">'is rt afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.139">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:50.140">Evaluating 'is rt afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:50.147">Comparing as boolean values</msg>
<status endtime="20160916 17:32:50.150" starttime="20160916 17:32:50.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.152">Precondition check on 'is rt afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.154">Is Rt Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:50.155" starttime="20160916 17:32:50.097" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:50.192" starttime="20160916 17:32:50.170" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.194">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.197">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:50.198">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:50.203">Comparing as boolean values</msg>
<status endtime="20160916 17:32:50.206" starttime="20160916 17:32:50.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.208">Precondition check on 'is thumbnail disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.210">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:50.212" starttime="20160916 17:32:50.158" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:50.251" starttime="20160916 17:32:50.229" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.253">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.255">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:50.257">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:50.261">Comparing as boolean values</msg>
<status endtime="20160916 17:32:50.264" starttime="20160916 17:32:50.259" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.266">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.267">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:50.268" starttime="20160916 17:32:50.215" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:50.305" starttime="20160916 17:32:50.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.307">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.311">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:50.312">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:50.317">Comparing as boolean values</msg>
<status endtime="20160916 17:32:50.321" starttime="20160916 17:32:50.315" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:50.322">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:32:50.324">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:50.325" starttime="20160916 17:32:50.271" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:52.338">Slept 2 seconds</msg>
<status endtime="20160916 17:32:52.340" starttime="20160916 17:32:50.334" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:52.573">${NrOfFiles} = 2101</msg>
<status endtime="20160916 17:32:52.572" starttime="20160916 17:32:52.343" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:52.584">${NrOfThumbnails} = 2101</msg>
<status endtime="20160916 17:32:52.583" starttime="20160916 17:32:50.329" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:56.951">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:32:56.961" starttime="20160916 17:32:52.588" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:56.973">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:32:57.009" starttime="20160916 17:32:56.989" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:57.011">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:32:57.014">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:32:57.015">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:32:57.022">Comparing as boolean values</msg>
<status endtime="20160916 17:32:57.026" starttime="20160916 17:32:57.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:32:57.028">Requirement check on 'is thumbnail disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 17:32:57.029">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:32:57.030" starttime="20160916 17:32:56.968" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 60 Seconds</arg>
<arg>=</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 60 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:33:57.057">Slept 1 minute</msg>
<status endtime="20160916 17:33:57.061" starttime="20160916 17:32:57.054" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:33:57.302">${NrOfFiles} = 2101</msg>
<status endtime="20160916 17:33:57.301" starttime="20160916 17:33:57.064" status="PASS"></status>
</kw>
<status endtime="20160916 17:33:57.311" starttime="20160916 17:32:57.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:33:57.314">'Generated Thumbnails For Channel 1 After 60 Seconds' is '2101'</msg>
<msg level="INFO" timestamp="20160916 17:33:57.317">Interpreting '${NrOfThumbnails}' as fixed value '2101'</msg>
<msg level="INFO" timestamp="20160916 17:33:57.318">Evaluating 'Generated Thumbnails For Channel 1 After 60 Seconds [2101]' = '${NrOfThumbnails} [2101]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>2101</arg>
<arg>2101</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:33:57.324">Comparing evaluated keyword values</msg>
<status endtime="20160916 17:33:57.328" starttime="20160916 17:33:57.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:33:57.329">Requirement check on 'Generated Thumbnails For Channel 1 After 60 Seconds [2101] = ${NrOfThumbnails} [2101]'</msg>
<msg level="INFO" timestamp="20160916 17:33:57.331">Generated Thumbnails For Channel 1 After 60 Seconds
        =, 2101, 2101</msg>
<status endtime="20160916 17:33:57.331" starttime="20160916 17:32:57.034" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:34:02.229">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:34:02.233" starttime="20160916 17:33:57.345" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:34:17.241">Slept 15 seconds</msg>
<status endtime="20160916 17:34:17.243" starttime="20160916 17:34:02.237" status="PASS"></status>
</kw>
<status endtime="20160916 17:34:17.243" starttime="20160916 17:33:57.339" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:34:17.243">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  D:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160916 17:34:17.243" starttime="20160916 17:34:17.243" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:34:32.265">Slept 15 seconds</msg>
<status endtime="20160916 17:34:32.265" starttime="20160916 17:34:17.258" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:34:32.281" starttime="20160916 17:34:32.265" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:34:47.288">Slept 15 seconds</msg>
<status endtime="20160916 17:34:47.288" starttime="20160916 17:34:32.281" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:35:20.567">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:35:20.573" starttime="20160916 17:34:47.288" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:35:35.582">Slept 15 seconds</msg>
<status endtime="20160916 17:35:35.584" starttime="20160916 17:35:20.579" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:35:37.421">[log] CLICK on L(126,33)@S(0)[0,0 1280x1024]
[log] CLICK on L(993,34)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:35:37.426" starttime="20160916 17:35:35.588" status="PASS"></status>
</kw>
<status endtime="20160916 17:35:37.429" starttime="20160916 17:34:47.288" status="PASS"></status>
</kw>
<status endtime="20160916 17:35:37.436" starttime="20160916 17:34:17.258" status="PASS"></status>
</kw>
<status endtime="20160916 17:35:37.439" starttime="20160916 17:33:57.333" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:35:37.442" starttime="20160916 17:31:05.911" status="PASS"></status>
</test>
<test name="Enable VFP Streaming Channel 1, Configuration Does Not Support VFP Streaming" id="s1-s1-s1-s3-t18">
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_No_VFP_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:35:42.494">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:35:42.500" starttime="20160916 17:35:37.474" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:35:57.510">Slept 15 seconds</msg>
<status endtime="20160916 17:35:57.512" starttime="20160916 17:35:42.505" status="PASS"></status>
</kw>
<status endtime="20160916 17:35:57.512" starttime="20160916 17:35:37.468" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:35:57.558">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_CCStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 17:35:57.558" starttime="20160916 17:35:57.512" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:36:12.581">Slept 15 seconds</msg>
<status endtime="20160916 17:36:12.581" starttime="20160916 17:35:57.574" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:36:12.597" starttime="20160916 17:36:12.581" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:36:27.604">Slept 15 seconds</msg>
<status endtime="20160916 17:36:27.604" starttime="20160916 17:36:12.597" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:00.654">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:37:00.660" starttime="20160916 17:36:27.604" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:15.667">Slept 15 seconds</msg>
<status endtime="20160916 17:37:15.669" starttime="20160916 17:37:00.664" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:17.681">[log] CLICK on L(324,231)@S(0)[0,0 1280x1024]
[log] CLICK on L(1191,232)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:37:17.686" starttime="20160916 17:37:15.674" status="PASS"></status>
</kw>
<status endtime="20160916 17:37:17.689" starttime="20160916 17:36:27.604" status="PASS"></status>
</kw>
<status endtime="20160916 17:37:17.692" starttime="20160916 17:35:57.574" status="PASS"></status>
</kw>
<status endtime="20160916 17:37:17.694" starttime="20160916 17:35:37.462" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:17.896">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:37:17.895" starttime="20160916 17:37:17.704" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.233">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:37:21.239" starttime="20160916 17:37:17.900" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.243">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:37:21.242" starttime="20160916 17:37:17.699" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.285" starttime="20160916 17:37:21.262" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.287">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.289">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.290">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.295">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.301" starttime="20160916 17:37:21.293" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.302">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.304">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.305" starttime="20160916 17:37:21.248" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.341" starttime="20160916 17:37:21.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.342">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.346">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.348">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.352">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.355" starttime="20160916 17:37:21.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.357">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.358">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.359" starttime="20160916 17:37:21.307" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.394" starttime="20160916 17:37:21.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.396">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.398">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.399">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.404">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.407" starttime="20160916 17:37:21.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.408">Precondition check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.410">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.411" starttime="20160916 17:37:21.361" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.447" starttime="20160916 17:37:21.427" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.449">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.451">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.452">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.457">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.460" starttime="20160916 17:37:21.454" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.461">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.463">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.464" starttime="20160916 17:37:21.414" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.506" starttime="20160916 17:37:21.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.512">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.516">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.517">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.522">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.525" starttime="20160916 17:37:21.519" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.527">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.528">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.529" starttime="20160916 17:37:21.466" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.569" starttime="20160916 17:37:21.546" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.571">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.573">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.574">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.581">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.584" starttime="20160916 17:37:21.578" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.585">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.587">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.588" starttime="20160916 17:37:21.532" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.623" starttime="20160916 17:37:21.602" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.625">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.627">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.628">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.632">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.635" starttime="20160916 17:37:21.630" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.636">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.638">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.639" starttime="20160916 17:37:21.590" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:21.676" starttime="20160916 17:37:21.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.679">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.682">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:21.683">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:21.687">Comparing as boolean values</msg>
<status endtime="20160916 17:37:21.691" starttime="20160916 17:37:21.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:21.692">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:21.693">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:21.695" starttime="20160916 17:37:21.641" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:26.076">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:37:26.081" starttime="20160916 17:37:21.697" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:37:26.126" starttime="20160916 17:37:26.100" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:26.132">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:37:26.134">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:37:26.136">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:26.140">Comparing as boolean values</msg>
<status endtime="20160916 17:37:26.144" starttime="20160916 17:37:26.138" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:37:26.146">Requirement check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:37:26.147">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:37:26.148" starttime="20160916 17:37:26.086" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>TODO: check that PC Detector does not send VFP stream</arg>
</arguments>
<status endtime="20160916 17:37:26.154" starttime="20160916 17:37:26.151" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:30.998">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:37:31.003" starttime="20160916 17:37:26.167" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:46.011">Slept 15 seconds</msg>
<status endtime="20160916 17:37:46.012" starttime="20160916 17:37:31.008" status="PASS"></status>
</kw>
<status endtime="20160916 17:37:46.012" starttime="20160916 17:37:26.161" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:37:46.028">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 17:37:46.043" starttime="20160916 17:37:46.012" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:38:01.059">Slept 15 seconds</msg>
<status endtime="20160916 17:38:01.061" starttime="20160916 17:37:46.059" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:38:01.077" starttime="20160916 17:38:01.061" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:38:16.084">Slept 15 seconds</msg>
<status endtime="20160916 17:38:16.084" starttime="20160916 17:38:01.077" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:38:49.214">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:38:49.219" starttime="20160916 17:38:16.084" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:39:04.225">Slept 15 seconds</msg>
<status endtime="20160916 17:39:04.226" starttime="20160916 17:38:49.222" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:39:06.067">[log] CLICK on L(280,187)@S(0)[0,0 1280x1024]
[log] CLICK on L(1147,188)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:39:06.072" starttime="20160916 17:39:04.230" status="PASS"></status>
</kw>
<status endtime="20160916 17:39:06.075" starttime="20160916 17:38:16.084" status="PASS"></status>
</kw>
<status endtime="20160916 17:39:06.077" starttime="20160916 17:37:46.043" status="PASS"></status>
</kw>
<status endtime="20160916 17:39:06.079" starttime="20160916 17:37:26.156" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:39:06.082" starttime="20160916 17:35:37.453" status="PASS"></status>
</test>
<test name="Enable AFP Streaming Channel 1, Configuration Does Not Support AFP Streaming" id="s1-s1-s1-s3-t19">
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_No_AFP_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:39:11.172">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:39:11.176" starttime="20160916 17:39:06.112" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:39:26.184">Slept 15 seconds</msg>
<status endtime="20160916 17:39:26.186" starttime="20160916 17:39:11.181" status="PASS"></status>
</kw>
<status endtime="20160916 17:39:26.186" starttime="20160916 17:39:06.107" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:39:26.186">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_CCStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 17:39:26.186" starttime="20160916 17:39:26.186" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:39:41.208">Slept 15 seconds</msg>
<status endtime="20160916 17:39:41.208" starttime="20160916 17:39:26.201" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:39:41.224" starttime="20160916 17:39:41.208" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:39:56.231">Slept 15 seconds</msg>
<status endtime="20160916 17:39:56.231" starttime="20160916 17:39:41.224" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:29.461">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:40:29.471" starttime="20160916 17:39:56.231" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:44.479">Slept 15 seconds</msg>
<status endtime="20160916 17:40:44.481" starttime="20160916 17:40:29.475" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:46.374">[log] CLICK on L(236,143)@S(0)[0,0 1280x1024]
[log] CLICK on L(1103,144)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:40:46.381" starttime="20160916 17:40:44.485" status="PASS"></status>
</kw>
<status endtime="20160916 17:40:46.384" starttime="20160916 17:39:56.231" status="PASS"></status>
</kw>
<status endtime="20160916 17:40:46.387" starttime="20160916 17:39:26.201" status="PASS"></status>
</kw>
<status endtime="20160916 17:40:46.389" starttime="20160916 17:39:06.101" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:46.520">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:40:46.519" starttime="20160916 17:40:46.405" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:49.856">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:40:49.861" starttime="20160916 17:40:46.524" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:49.866">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:40:49.864" starttime="20160916 17:40:46.394" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:49.906" starttime="20160916 17:40:49.884" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:49.909">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:49.911">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:49.912">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:49.917">Comparing as boolean values</msg>
<status endtime="20160916 17:40:49.923" starttime="20160916 17:40:49.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:49.925">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:49.926">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:49.927" starttime="20160916 17:40:49.870" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:49.964" starttime="20160916 17:40:49.945" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:49.966">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:49.970">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:49.971">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:49.976">Comparing as boolean values</msg>
<status endtime="20160916 17:40:49.979" starttime="20160916 17:40:49.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:49.981">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:49.982">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:49.983" starttime="20160916 17:40:49.930" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:50.022" starttime="20160916 17:40:50.000" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.024">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.026">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:50.027">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:50.032">Comparing as boolean values</msg>
<status endtime="20160916 17:40:50.036" starttime="20160916 17:40:50.030" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.038">Precondition check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.039">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:50.040" starttime="20160916 17:40:49.986" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:50.079" starttime="20160916 17:40:50.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.081">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.083">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:50.084">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:50.089">Comparing as boolean values</msg>
<status endtime="20160916 17:40:50.093" starttime="20160916 17:40:50.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.094">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.095">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:50.096" starttime="20160916 17:40:50.044" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:50.134" starttime="20160916 17:40:50.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.137">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.140">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:50.141">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:50.145">Comparing as boolean values</msg>
<status endtime="20160916 17:40:50.148" starttime="20160916 17:40:50.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.150">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.151">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:50.152" starttime="20160916 17:40:50.099" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:50.202" starttime="20160916 17:40:50.180" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.204">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.207">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:50.208">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:50.214">Comparing as boolean values</msg>
<status endtime="20160916 17:40:50.218" starttime="20160916 17:40:50.211" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.220">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.221">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:50.222" starttime="20160916 17:40:50.155" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:50.259" starttime="20160916 17:40:50.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.261">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.264">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:50.265">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:50.271">Comparing as boolean values</msg>
<status endtime="20160916 17:40:50.274" starttime="20160916 17:40:50.267" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.276">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.277">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:50.278" starttime="20160916 17:40:50.225" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:50.315" starttime="20160916 17:40:50.293" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.316">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.319">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:50.320">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:50.324">Comparing as boolean values</msg>
<status endtime="20160916 17:40:50.327" starttime="20160916 17:40:50.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:50.329">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:50.330">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:50.331" starttime="20160916 17:40:50.281" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:54.661">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:40:54.666" starttime="20160916 17:40:50.333" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:40:54.704" starttime="20160916 17:40:54.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:54.707">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:40:54.710">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:40:54.710">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:54.715">Comparing as boolean values</msg>
<status endtime="20160916 17:40:54.719" starttime="20160916 17:40:54.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:40:54.721">Requirement check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:40:54.722">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:40:54.723" starttime="20160916 17:40:54.669" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>TODO: check that PC Detector does not send AFP stream</arg>
</arguments>
<status endtime="20160916 17:40:54.727" starttime="20160916 17:40:54.725" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:40:58.380">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:40:58.385" starttime="20160916 17:40:54.741" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:41:13.396">Slept 15 seconds</msg>
<status endtime="20160916 17:41:13.397" starttime="20160916 17:40:58.391" status="PASS"></status>
</kw>
<status endtime="20160916 17:41:13.397" starttime="20160916 17:40:54.734" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:41:13.397">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 17:41:13.397" starttime="20160916 17:41:13.397" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:41:28.413">Slept 15 seconds</msg>
<status endtime="20160916 17:41:28.415" starttime="20160916 17:41:13.413" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:41:28.431" starttime="20160916 17:41:28.415" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:41:43.431">Slept 15 seconds</msg>
<status endtime="20160916 17:41:43.433" starttime="20160916 17:41:28.431" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:42:16.770">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:42:16.777" starttime="20160916 17:41:43.433" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:42:31.784">Slept 15 seconds</msg>
<status endtime="20160916 17:42:31.786" starttime="20160916 17:42:16.781" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:42:33.636">[log] CLICK on L(192,99)@S(0)[0,0 1280x1024]
[log] CLICK on L(1059,100)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:42:33.649" starttime="20160916 17:42:31.790" status="PASS"></status>
</kw>
<status endtime="20160916 17:42:33.651" starttime="20160916 17:41:43.433" status="PASS"></status>
</kw>
<status endtime="20160916 17:42:33.654" starttime="20160916 17:41:13.413" status="PASS"></status>
</kw>
<status endtime="20160916 17:42:33.656" starttime="20160916 17:40:54.729" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:42:33.659" starttime="20160916 17:39:06.093" status="PASS"></status>
</test>
<test name="Enable CC Streaming Channel 1, Configuration Does Not Support CC Streaming" id="s1-s1-s1-s3-t20">
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_No_CC_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:42:38.703">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:42:38.711" starttime="20160916 17:42:33.692" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:42:53.732">Slept 15 seconds</msg>
<status endtime="20160916 17:42:53.732" starttime="20160916 17:42:38.715" status="PASS"></status>
</kw>
<status endtime="20160916 17:42:53.732" starttime="20160916 17:42:33.686" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:42:53.763">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_VFPStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 17:42:53.763" starttime="20160916 17:42:53.732" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:43:08.779">Slept 15 seconds</msg>
<status endtime="20160916 17:43:08.781" starttime="20160916 17:42:53.779" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:43:08.797" starttime="20160916 17:43:08.781" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:43:23.804">Slept 15 seconds</msg>
<status endtime="20160916 17:43:23.804" starttime="20160916 17:43:08.797" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:43:56.884">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:43:56.895" starttime="20160916 17:43:23.804" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:11.906">Slept 15 seconds</msg>
<status endtime="20160916 17:44:11.908" starttime="20160916 17:43:56.903" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:13.765">[log] CLICK on L(148,55)@S(0)[0,0 1280x1024]
[log] CLICK on L(1015,56)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:44:13.774" starttime="20160916 17:44:11.911" status="PASS"></status>
</kw>
<status endtime="20160916 17:44:13.777" starttime="20160916 17:43:23.804" status="PASS"></status>
</kw>
<status endtime="20160916 17:44:13.779" starttime="20160916 17:42:53.763" status="PASS"></status>
</kw>
<status endtime="20160916 17:44:13.781" starttime="20160916 17:42:33.680" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:13.948">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:44:13.947" starttime="20160916 17:44:13.792" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.287">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:44:17.290" starttime="20160916 17:44:13.953" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.293">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:44:17.292" starttime="20160916 17:44:13.786" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.333" starttime="20160916 17:44:17.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.335">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.338">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.339">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.354">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.358" starttime="20160916 17:44:17.342" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.359">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.361">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.362" starttime="20160916 17:44:17.297" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.400" starttime="20160916 17:44:17.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.402">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.404">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.405">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.413">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.417" starttime="20160916 17:44:17.410" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.418">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.420">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.421" starttime="20160916 17:44:17.364" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.458" starttime="20160916 17:44:17.437" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.461">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.463">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.464">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.468">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.471" starttime="20160916 17:44:17.466" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.473">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.476">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.478" starttime="20160916 17:44:17.423" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.513" starttime="20160916 17:44:17.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.515">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.517">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.518">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.523">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.526" starttime="20160916 17:44:17.521" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.527">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.528">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.529" starttime="20160916 17:44:17.481" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.565" starttime="20160916 17:44:17.546" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.567">'is rt afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.569">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.570">Evaluating 'is rt afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.576">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.579" starttime="20160916 17:44:17.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.581">Precondition check on 'is rt afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.582">Is Rt Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.583" starttime="20160916 17:44:17.532" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.617" starttime="20160916 17:44:17.597" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.619">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.621">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.622">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.626">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.629" starttime="20160916 17:44:17.624" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.630">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.631">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.632" starttime="20160916 17:44:17.586" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.674" starttime="20160916 17:44:17.648" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.680">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.683">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.684">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.688">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.692" starttime="20160916 17:44:17.686" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.693">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.694">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.695" starttime="20160916 17:44:17.635" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:17.732" starttime="20160916 17:44:17.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.734">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.737">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:17.738">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:17.744">Comparing as boolean values</msg>
<status endtime="20160916 17:44:17.747" starttime="20160916 17:44:17.741" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:17.749">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:17.751">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:17.751" starttime="20160916 17:44:17.697" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Cc Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:21.574">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:44:21.581" starttime="20160916 17:44:17.754" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:44:21.624" starttime="20160916 17:44:21.600" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:21.626">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:44:21.629">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:44:21.630">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:21.635">Comparing as boolean values</msg>
<status endtime="20160916 17:44:21.639" starttime="20160916 17:44:21.633" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:44:21.641">Requirement check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:44:21.643">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:44:21.645" starttime="20160916 17:44:21.586" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>TODO: check that PC Detector does not send CC stream</arg>
</arguments>
<status endtime="20160916 17:44:21.651" starttime="20160916 17:44:21.649" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:26.550">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(691,556)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:44:26.556" starttime="20160916 17:44:21.664" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:41.565">Slept 15 seconds</msg>
<status endtime="20160916 17:44:41.567" starttime="20160916 17:44:26.561" status="PASS"></status>
</kw>
<status endtime="20160916 17:44:41.567" starttime="20160916 17:44:21.659" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:41.567">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  D:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160916 17:44:41.567" starttime="20160916 17:44:41.567" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:44:56.590">Slept 15 seconds</msg>
<status endtime="20160916 17:44:56.590" starttime="20160916 17:44:41.583" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:44:56.606" starttime="20160916 17:44:56.590" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:45:11.622">Slept 15 seconds</msg>
<status endtime="20160916 17:45:11.624" starttime="20160916 17:44:56.606" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:45:44.725">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:45:44.732" starttime="20160916 17:45:11.624" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:45:59.739">Slept 15 seconds</msg>
<status endtime="20160916 17:45:59.741" starttime="20160916 17:45:44.736" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:01.604">[log] CLICK on L(126,33)@S(0)[0,0 1280x1024]
[log] CLICK on L(993,34)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:46:01.610" starttime="20160916 17:45:59.747" status="PASS"></status>
</kw>
<status endtime="20160916 17:46:01.614" starttime="20160916 17:45:11.624" status="PASS"></status>
</kw>
<status endtime="20160916 17:46:01.617" starttime="20160916 17:44:41.583" status="PASS"></status>
</kw>
<status endtime="20160916 17:46:01.619" starttime="20160916 17:44:21.653" status="PASS"></status>
</kw>
<doc>Note: Make sure that the Media Player is streaming a file with Closed Captioning to the PC Detector.</doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:46:01.621" starttime="20160916 17:42:33.668" status="PASS"></status>
</test>
<test name="Enable AFP Features Channel 1, Audio Input Disabled In Preferences" id="s1-s1-s1-s3-t21">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:01.843">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:46:01.842" starttime="20160916 17:46:01.650" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.183">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:46:05.185" starttime="20160916 17:46:01.849" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.189">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:46:05.188" starttime="20160916 17:46:01.642" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.233" starttime="20160916 17:46:05.205" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.239">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.242">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.243">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.249">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.254" starttime="20160916 17:46:05.245" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.256">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.257">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.258" starttime="20160916 17:46:05.192" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.297" starttime="20160916 17:46:05.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.299">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.302">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.303">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.308">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.311" starttime="20160916 17:46:05.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.312">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.313">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.315" starttime="20160916 17:46:05.261" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.355" starttime="20160916 17:46:05.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.357">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.360">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.361">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.366">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.369" starttime="20160916 17:46:05.363" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.370">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.372">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.372" starttime="20160916 17:46:05.320" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.411" starttime="20160916 17:46:05.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.413">'is afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.418">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.419">Evaluating 'is afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.423">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.426" starttime="20160916 17:46:05.421" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.428">Precondition check on 'is afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.429">Is Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.430" starttime="20160916 17:46:05.375" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.468" starttime="20160916 17:46:05.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.470">'is rt afp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.473">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.474">Evaluating 'is rt afp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.478">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.482" starttime="20160916 17:46:05.476" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.485">Precondition check on 'is rt afp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.486">Is Rt Afp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.487" starttime="20160916 17:46:05.432" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.530" starttime="20160916 17:46:05.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.536">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.538">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.539">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.544">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.547" starttime="20160916 17:46:05.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.550">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.552">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.554" starttime="20160916 17:46:05.489" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.591" starttime="20160916 17:46:05.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.593">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.595">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.596">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.601">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.604" starttime="20160916 17:46:05.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.605">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.606">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.607" starttime="20160916 17:46:05.556" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:46:05.643" starttime="20160916 17:46:05.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.645">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.648">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:46:05.650">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:05.656">Comparing as boolean values</msg>
<status endtime="20160916 17:46:05.658" starttime="20160916 17:46:05.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:46:05.660">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:46:05.661">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:46:05.662" starttime="20160916 17:46:05.610" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Disable Audio Input In Preferences">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Disable Audio Input And Stop Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:11.903">Warning pop-up Window found</msg>
<status endtime="20160916 17:46:11.910" starttime="20160916 17:46:05.669" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:26.929">Slept 15 seconds</msg>
<status endtime="20160916 17:46:26.930" starttime="20160916 17:46:11.925" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:46:26.946" starttime="20160916 17:46:26.930" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:46:41.946">Slept 15 seconds</msg>
<status endtime="20160916 17:46:41.948" starttime="20160916 17:46:26.946" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:15.023">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:47:15.028" starttime="20160916 17:46:41.948" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:30.034">Slept 15 seconds</msg>
<status endtime="20160916 17:47:30.036" starttime="20160916 17:47:15.031" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:31.890">[log] CLICK on L(346,253)@S(0)[0,0 1280x1024]
[log] CLICK on L(1213,254)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:47:31.896" starttime="20160916 17:47:30.039" status="PASS"></status>
</kw>
<status endtime="20160916 17:47:31.898" starttime="20160916 17:46:41.948" status="PASS"></status>
</kw>
<status endtime="20160916 17:47:31.902" starttime="20160916 17:46:11.915" status="PASS"></status>
</kw>
<status endtime="20160916 17:47:31.905" starttime="20160916 17:46:05.664" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:32.078">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:47:32.076" starttime="20160916 17:47:31.916" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.418">Channel Confirm Error : Not active</msg>
<status endtime="20160916 17:47:35.420" starttime="20160916 17:47:32.085" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.424">${region} = R[18,76 924x63]@S(0)[0,0 1280x1024] E:Y, T:3.0</msg>
<status endtime="20160916 17:47:35.423" starttime="20160916 17:47:31.910" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.461" starttime="20160916 17:47:35.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.463">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.466">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.467">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.473">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.477" starttime="20160916 17:47:35.469" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.479">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.480">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.481" starttime="20160916 17:47:35.427" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.517" starttime="20160916 17:47:35.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.519">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.521">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.522">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.526">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.529" starttime="20160916 17:47:35.524" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.530">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.531">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.532" starttime="20160916 17:47:35.484" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.572" starttime="20160916 17:47:35.546" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.578">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.581">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.582">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.586">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.589" starttime="20160916 17:47:35.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.591">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.592">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.593" starttime="20160916 17:47:35.534" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.627" starttime="20160916 17:47:35.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.629">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.631">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.632">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.636">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.640" starttime="20160916 17:47:35.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.642">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.643">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.644" starttime="20160916 17:47:35.595" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.678" starttime="20160916 17:47:35.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.680">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.682">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.683">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.687">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.690" starttime="20160916 17:47:35.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.691">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.693">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.693" starttime="20160916 17:47:35.646" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.726" starttime="20160916 17:47:35.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.728">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.730">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.731">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.736">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.740" starttime="20160916 17:47:35.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.742">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.743">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.744" starttime="20160916 17:47:35.696" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.778" starttime="20160916 17:47:35.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.780">'is cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.782">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.783">Evaluating 'is cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.787">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.790" starttime="20160916 17:47:35.785" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.791">Precondition check on 'is cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.792">Is Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.793" starttime="20160916 17:47:35.747" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:35.828" starttime="20160916 17:47:35.810" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.830">'is rt cc enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.832">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:35.842">Evaluating 'is rt cc enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:35.851">Comparing as boolean values</msg>
<status endtime="20160916 17:47:35.855" starttime="20160916 17:47:35.848" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:35.857">Precondition check on 'is rt cc enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160916 17:47:35.858">Is Rt Cc Enabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:35.859" starttime="20160916 17:47:35.796" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:40.314">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:47:40.319" starttime="20160916 17:47:35.861" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:44.703">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160916 17:47:44.708" starttime="20160916 17:47:40.323" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:44.717">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:44.748" starttime="20160916 17:47:44.729" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:44.751">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:44.753">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:44.754">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:44.758">Comparing as boolean values</msg>
<status endtime="20160916 17:47:44.763" starttime="20160916 17:47:44.756" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:44.764">Precondition check on 'is afp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 17:47:44.765">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:44.767" starttime="20160916 17:47:44.711" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:44.773">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160916 17:47:44.806" starttime="20160916 17:47:44.785" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:44.807">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160916 17:47:44.810">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160916 17:47:44.811">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:44.817">Comparing as boolean values</msg>
<status endtime="20160916 17:47:44.820" starttime="20160916 17:47:44.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160916 17:47:44.821">Precondition check on 'is rt afp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160916 17:47:44.822">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160916 17:47:44.823" starttime="20160916 17:47:44.769" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>TODO: check that PC Detector does not send AFP stream</arg>
</arguments>
<status endtime="20160916 17:47:44.828" starttime="20160916 17:47:44.826" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Enable Audio Input In Preferences">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Enable Audio Input And Stop Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:47:50.278">Warning pop-up Window found</msg>
<status endtime="20160916 17:47:50.284" starttime="20160916 17:47:44.835" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:48:05.301">Slept 15 seconds</msg>
<status endtime="20160916 17:48:05.303" starttime="20160916 17:47:50.298" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:48:05.319" starttime="20160916 17:48:05.303" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:48:20.319">Slept 15 seconds</msg>
<status endtime="20160916 17:48:20.321" starttime="20160916 17:48:05.319" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:48:53.437">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:48:53.447" starttime="20160916 17:48:20.321" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:49:08.459">Slept 15 seconds</msg>
<status endtime="20160916 17:49:08.460" starttime="20160916 17:48:53.456" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:49:10.313">[log] CLICK on L(324,231)@S(0)[0,0 1280x1024]
[log] CLICK on L(1191,232)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:49:10.318" starttime="20160916 17:49:08.465" status="PASS"></status>
</kw>
<status endtime="20160916 17:49:10.320" starttime="20160916 17:48:20.321" status="PASS"></status>
</kw>
<status endtime="20160916 17:49:10.322" starttime="20160916 17:47:50.291" status="PASS"></status>
</kw>
<status endtime="20160916 17:49:10.324" starttime="20160916 17:47:44.829" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160916 17:49:10.326" starttime="20160916 17:46:01.630" status="PASS"></status>
</test>
<kw type="teardown" name="shared_keywords.Set Ceco Length">
<doc></doc>
<arguments>
<arg>${15Minutes}</arg>
</arguments>
<kw type="kw" name="${RestartRequired} = PCDetector.Set Ceco Length And Stop Application">
<doc></doc>
<arguments>
<arg>${CecoLength}</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:49:17.109">Before checking the ceco
Scores 15_min_ceco=0.909121692181 and 2_min_ceco=0.953830242157 
Before finding settings area
Before finding settings input area
Before finding Dailog Button
Warning pop-up Window found</msg>
<msg level="INFO" timestamp="20160916 17:49:17.115">${RestartRequired} = True</msg>
<status endtime="20160916 17:49:17.114" starttime="20160916 17:49:10.403" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${RestartRequired}</arg>
<arg>Start PC Detector Application After 15 Seconds</arg>
</arguments>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:49:32.134">Slept 15 seconds</msg>
<status endtime="20160916 17:49:32.136" starttime="20160916 17:49:17.132" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160916 17:49:32.152" starttime="20160916 17:49:32.136" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:49:47.159">Slept 15 seconds</msg>
<status endtime="20160916 17:49:47.159" starttime="20160916 17:49:32.152" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:50:20.428">License warning not found, no need to make it disappear</msg>
<status endtime="20160916 17:50:20.433" starttime="20160916 17:49:47.159" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:50:35.441">Slept 15 seconds</msg>
<status endtime="20160916 17:50:35.443" starttime="20160916 17:50:20.438" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160916 17:50:36.979">[log] CLICK on L(324,231)@S(0)[0,0 1280x1024]
[log] CLICK on L(1191,232)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:50:36.981" starttime="20160916 17:50:35.446" status="PASS"></status>
</kw>
<status endtime="20160916 17:50:36.983" starttime="20160916 17:49:47.159" status="PASS"></status>
</kw>
<status endtime="20160916 17:50:36.986" starttime="20160916 17:49:17.126" status="PASS"></status>
</kw>
<status endtime="20160916 17:50:36.989" starttime="20160916 17:49:17.118" status="PASS"></status>
</kw>
<status endtime="20160916 17:50:36.991" starttime="20160916 17:49:10.395" status="PASS"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160916 17:50:36.993" starttime="20160916 15:35:38.949" status="FAIL"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\09__Stop_Application.txt" name="Stop Application" id="s1-s1-s1-s4">
<test name="Stop PC Detector Application" id="s1-s1-s1-s4-t1">
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>no</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:50:42.770">[log] CLICK on L(17,29)@S(0)[0,0 1280x1024]
[log] CLICK on L(122,116)@S(0)[0,0 1280x1024]
[log] CLICK on L(773,558)@S(0)[0,0 1280x1024]</msg>
<status endtime="20160916 17:50:42.776" starttime="20160916 17:50:37.426" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Close Application Window">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:50:50.110">Closing the application window failed
Failed to find dialog title or dialog button</msg>
<status endtime="20160916 17:50:50.117" starttime="20160916 17:50:42.779" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160916 17:50:52.125">Slept 2 seconds</msg>
<status endtime="20160916 17:50:52.127" starttime="20160916 17:50:50.121" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>default</tag>
</tags>
<status critical="yes" endtime="20160916 17:50:52.129" starttime="20160916 17:50:37.420" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160916 17:50:52.140" starttime="20160916 17:50:37.171" status="PASS"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160916 17:50:52.196" starttime="20160916 15:24:24.598" status="FAIL"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160916 17:50:52.398" starttime="20160916 15:24:24.520" status="FAIL"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160916 17:50:52.562" starttime="20160916 15:24:24.349" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="20" fail="8">Critical Tests</stat>
<stat pass="20" fail="8">All Tests</stat>
</total>
<tag>
<stat pass="4" fail="0" doc="" links="" combined="" info="">D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</stat>
<stat pass="2" fail="0" doc="" links="" combined="" info="">default</stat>
<stat pass="4" fail="0" doc="" links="" combined="" info="">known_issue</stat>
<stat pass="9" fail="0" doc="" links="" combined="" info="">matrox</stat>
<stat pass="18" fail="8" doc="" links="" combined="" info="">osprey</stat>
<stat pass="11" fail="1" doc="" links="" combined="" info="">ospreyWithoutAudio</stat>
</tag>
<suite>
<stat pass="20" fail="8" name="Robot" id="s1">Robot</stat>
<stat pass="20" fail="8" name="Tests" id="s1-s1">Robot.Tests</stat>
<stat pass="20" fail="8" name="Functional Tests" id="s1-s1-s1">Robot.Tests.Functional Tests</stat>
<stat pass="1" fail="0" name="Start Application" id="s1-s1-s1-s1">Robot.Tests.Functional Tests.Start Application</stat>
<stat pass="5" fail="0" name="Start and Stop Channels" id="s1-s1-s1-s2">Robot.Tests.Functional Tests.Start and Stop Channels</stat>
<stat pass="13" fail="8" name="Enable and Disable Features" id="s1-s1-s1-s3">Robot.Tests.Functional Tests.Enable and Disable Features</stat>
<stat pass="1" fail="0" name="Stop Application" id="s1-s1-s1-s4">Robot.Tests.Functional Tests.Stop Application</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
