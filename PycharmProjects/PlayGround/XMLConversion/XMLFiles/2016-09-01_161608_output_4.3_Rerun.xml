<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.1 (Jython 2.7.0 on java1.8.0_101)" generated="20160901 16:16:09.524">
<suite source="C:\PCDetector_Testing\Testing\Robot" name="Robot" id="s1">
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests" name="Tests" id="s1-s1">
<kw type="setup" name="test suite setup">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${now} = BuiltIn.Get Time">
<doc>Returns the given time in the requested format.</doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:16:11.411">${now} = 2016-09-01 16:16:11</msg>
<status endtime="20160901 16:16:11.411" starttime="20160901 16:16:11.411" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SuiteStartTime}</arg>
<arg>${now}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:16:11.427">${SuiteStartTime} = 2016-09-01 16:16:11</msg>
<status endtime="20160901 16:16:11.427" starttime="20160901 16:16:11.411" status="PASS"></status>
</kw>
<status endtime="20160901 16:16:11.427" starttime="20160901 16:16:11.396" status="PASS"></status>
</kw>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests" name="Functional Tests" id="s1-s1-s1">
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\00__Start_Application.txt" name="Start Application" id="s1-s1-s1-s1">
<test name="Start PC Detector Application" id="s1-s1-s1-s1-t1">
<kw type="setup" name="Test Case Setup">
<doc>Make sure that the default configuration and license are used.</doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:16:12.847">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160901 16:16:12.847" starttime="20160901 16:16:12.831" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:16:12.847">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160901 16:16:12.847" starttime="20160901 16:16:12.847" status="PASS"></status>
</kw>
<status endtime="20160901 16:16:12.862" starttime="20160901 16:16:12.815" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:16:45.880">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:16:45.880" starttime="20160901 16:16:12.862" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:00.910">Slept 15 seconds</msg>
<status endtime="20160901 16:17:00.925" starttime="20160901 16:16:45.895" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:02.922">[log] CLICK on L(236,143)@S(0)[0,0 1460x963]
[log] CLICK on L(1103,144)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:17:02.922" starttime="20160901 16:17:00.925" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>default</tag>
</tags>
<status critical="yes" endtime="20160901 16:17:02.938" starttime="20160901 16:16:12.815" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160901 16:17:02.938" starttime="20160901 16:16:11.458" status="PASS"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\01__Start_and_Stop_Channels.txt" name="Start and Stop Channels" id="s1-s1-s1-s2">
<test name="Stop and Start Every Channel In Configuration, One By One" id="s1-s1-s1-s2-t1">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:16.873">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:17:16.888" starttime="20160901 16:17:03.125" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfChannels} = PCDetectorKeywords.Number Of Channels In Configuration">
<doc></doc>
<arguments>
<arg>non-UDP</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:16.888">${NrOfChannels} = 4</msg>
<status endtime="20160901 16:17:16.888" starttime="20160901 16:17:16.888" status="PASS"></status>
</kw>
<kw type="for" name="${channel} IN RANGE [ 1 | ${NrOfChannels} + 1 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${channel} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:16.966">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:17:16.966" starttime="20160901 16:17:16.920" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:26.274">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:17:26.274" starttime="20160901 16:17:16.966" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:26.290">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:30.157">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:17:30.172" starttime="20160901 16:17:26.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:30.172">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:17:30.172">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:17:30.172">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:30.188">Comparing as boolean values</msg>
<status endtime="20160901 16:17:30.188" starttime="20160901 16:17:30.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:30.188">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:17:30.188" starttime="20160901 16:17:26.274" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:35.474">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:17:35.474" starttime="20160901 16:17:30.203" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:35.490">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:38.578">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:17:38.578" starttime="20160901 16:17:35.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:38.578">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:17:38.593">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:17:38.593">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:38.593">Comparing as boolean values</msg>
<status endtime="20160901 16:17:38.593" starttime="20160901 16:17:38.593" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:38.609">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:17:38.609" starttime="20160901 16:17:35.490" status="PASS"></status>
</kw>
<status endtime="20160901 16:17:38.609" starttime="20160901 16:17:16.904" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:38.656">${region} = R[17,142 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:17:38.656" starttime="20160901 16:17:38.609" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:47.042">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:17:47.042" starttime="20160901 16:17:38.656" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:47.058">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:50.191">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:17:50.191" starttime="20160901 16:17:47.073" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:50.191">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:17:50.191">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:17:50.191">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:50.207">Comparing as boolean values</msg>
<status endtime="20160901 16:17:50.207" starttime="20160901 16:17:50.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:50.222">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:17:50.222" starttime="20160901 16:17:47.042" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:55.508">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:17:55.508" starttime="20160901 16:17:50.222" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:55.524">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:58.611">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:17:58.611" starttime="20160901 16:17:55.539" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:58.611">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:17:58.611">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:17:58.611">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:58.626">Comparing as boolean values</msg>
<status endtime="20160901 16:17:58.626" starttime="20160901 16:17:58.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:17:58.626">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:17:58.626" starttime="20160901 16:17:55.508" status="PASS"></status>
</kw>
<status endtime="20160901 16:17:58.626" starttime="20160901 16:17:38.609" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:17:58.673">${region} = R[17,208 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:17:58.673" starttime="20160901 16:17:58.642" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:06.970">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:18:06.970" starttime="20160901 16:17:58.673" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:06.986">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:10.137">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:18:10.137" starttime="20160901 16:18:07.002" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:10.137">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:18:10.137">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:18:10.137">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:10.152">Comparing as boolean values</msg>
<status endtime="20160901 16:18:10.152" starttime="20160901 16:18:10.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:10.152">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:18:10.152" starttime="20160901 16:18:06.970" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:15.315">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:18:15.315" starttime="20160901 16:18:10.152" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:15.331">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:18.510">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:18:18.510" starttime="20160901 16:18:15.346" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:18.510">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:18:18.510">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:18:18.510">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:18.510">Comparing as boolean values</msg>
<status endtime="20160901 16:18:18.526" starttime="20160901 16:18:18.510" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:18.526">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:18:18.526" starttime="20160901 16:18:15.315" status="PASS"></status>
</kw>
<status endtime="20160901 16:18:18.526" starttime="20160901 16:17:58.626" status="PASS"></status>
</kw>
<kw type="foritem" name="${channel} = 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:18.573">${region} = R[17,274 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:18:18.573" starttime="20160901 16:18:18.526" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:26.774">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:18:26.774" starttime="20160901 16:18:18.588" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:26.790">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:29.966">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:18:29.982" starttime="20160901 16:18:26.790" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:29.982">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:18:29.982">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:18:29.982">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:29.997">Comparing as boolean values</msg>
<status endtime="20160901 16:18:29.997" starttime="20160901 16:18:29.982" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:29.997">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:18:29.997" starttime="20160901 16:18:26.774" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:35.183">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:18:35.183" starttime="20160901 16:18:29.997" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:35.199">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:38.275">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:18:38.280" starttime="20160901 16:18:35.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:38.282">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:18:38.285">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:18:38.287">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:38.320">Comparing as boolean values</msg>
<status endtime="20160901 16:18:38.320" starttime="20160901 16:18:38.304" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:18:38.320">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<status endtime="20160901 16:18:38.320" starttime="20160901 16:18:35.183" status="PASS"></status>
</kw>
<status endtime="20160901 16:18:38.320" starttime="20160901 16:18:18.526" status="PASS"></status>
</kw>
<status endtime="20160901 16:18:38.320" starttime="20160901 16:17:16.904" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>default</tag>
<tag>known_issue</tag>
</tags>
<status critical="yes" endtime="20160901 16:18:38.320" starttime="20160901 16:17:03.109" status="PASS"></status>
</test>
<test name="Stop All Channels when All Channels Busy" id="s1-s1-s1-s2-t2">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:18:50.851">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:18:50.882" starttime="20160901 16:18:38.335" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:03.518">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:19:03.533" starttime="20160901 16:18:50.882" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:19:03.533">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:19:03.533">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160901 16:19:03.533">All Channels Busy</msg>
<status endtime="20160901 16:19:03.533" starttime="20160901 16:18:50.882" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:07.043">Warning pop-up Window found</msg>
<status endtime="20160901 16:19:07.043" starttime="20160901 16:19:03.533" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:19.438">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:19:19.470" starttime="20160901 16:19:07.043" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:19.470">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:32.082">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:19:32.082" starttime="20160901 16:19:19.485" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:19:32.082">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:19:32.082">Requirement check on 'All Channels Stopped [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160901 16:19:32.082">All Channels Stopped</msg>
<status endtime="20160901 16:19:32.082" starttime="20160901 16:19:19.470" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:35.295">Warning pop-up Window found</msg>
<status endtime="20160901 16:19:35.295" starttime="20160901 16:19:32.097" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:35.295">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:19:47.858">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:19:47.864" starttime="20160901 16:19:35.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:19:47.896">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:19:47.896">Requirement check on 'All Channels Busy [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160901 16:19:47.896">All Channels Busy</msg>
<status endtime="20160901 16:19:47.896" starttime="20160901 16:19:35.295" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>default</tag>
<tag>known_issue</tag>
</tags>
<status critical="yes" endtime="20160901 16:19:47.896" starttime="20160901 16:18:38.335" status="PASS"></status>
</test>
<test name="Stop All Channels when Some Channels Busy" id="s1-s1-s1-s2-t3">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:00.291">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:00.322" starttime="20160901 16:19:47.912" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:12.884">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:12.899" starttime="20160901 16:20:00.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:20:12.899">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:20:12.899">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160901 16:20:12.899">All Channels Busy</msg>
<status endtime="20160901 16:20:12.899" starttime="20160901 16:20:00.322" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:12.946">${region} = R[17,142 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:20:12.946" starttime="20160901 16:20:12.915" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:16.017">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:16.048" starttime="20160901 16:20:12.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:20:16.048">${region} = R[17,142 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:20:16.048" starttime="20160901 16:20:12.915" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:24.973">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:20:24.973" starttime="20160901 16:20:16.048" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:28.042">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:28.074" starttime="20160901 16:20:24.973" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:28.074">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:31.191">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:31.207" starttime="20160901 16:20:28.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:20:31.207">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:20:31.207">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:20:31.207">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:31.223">Comparing as boolean values</msg>
<status endtime="20160901 16:20:31.223" starttime="20160901 16:20:31.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:20:31.223">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160901 16:20:31.223">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160901 16:20:31.223" starttime="20160901 16:20:28.074" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 4">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:31.269">${region} = R[17,274 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:20:31.269" starttime="20160901 16:20:31.238" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:34.325">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:34.356" starttime="20160901 16:20:31.269" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:20:34.356">${region} = R[17,274 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:20:34.356" starttime="20160901 16:20:31.223" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:42.059">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:20:42.059" starttime="20160901 16:20:34.356" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:45.142">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:45.173" starttime="20160901 16:20:42.059" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:45.173">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:48.398">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:20:48.398" starttime="20160901 16:20:45.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:20:48.398">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:20:48.398">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:20:48.398">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:48.414">Comparing as boolean values</msg>
<status endtime="20160901 16:20:48.414" starttime="20160901 16:20:48.398" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:20:48.414">Requirement check on 'Channel Stopped ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160901 16:20:48.414">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160901 16:20:48.414" starttime="20160901 16:20:45.173" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:20:51.222">Warning pop-up Window found</msg>
<status endtime="20160901 16:20:51.222" starttime="20160901 16:20:48.414" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:03.631">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:21:03.662" starttime="20160901 16:20:51.222" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:03.662">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:16.258">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:21:16.274" starttime="20160901 16:21:03.677" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:21:16.274">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:21:16.274">Requirement check on 'All Channels Stopped [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160901 16:21:16.274">All Channels Stopped</msg>
<status endtime="20160901 16:21:16.274" starttime="20160901 16:21:03.662" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:19.191">Warning pop-up Window found</msg>
<status endtime="20160901 16:21:19.191" starttime="20160901 16:21:16.274" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:19.207">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:32.565">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:21:32.565" starttime="20160901 16:21:19.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:21:32.565">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:21:32.565">Requirement check on 'All Channels Busy [True]' after 13 seconds</msg>
<msg level="INFO" timestamp="20160901 16:21:32.565">All Channels Busy</msg>
<status endtime="20160901 16:21:32.565" starttime="20160901 16:21:19.191" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>default</tag>
<tag>known_issue</tag>
</tags>
<status critical="yes" endtime="20160901 16:21:32.565" starttime="20160901 16:19:47.896" status="PASS"></status>
</test>
<test name="Start All Channels when Some Channels Stopped" id="s1-s1-s1-s2-t4">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:45.017">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:21:45.048" starttime="20160901 16:21:32.596" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>All Channels Busy</arg>
</arguments>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:21:57.765">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:21:57.780" starttime="20160901 16:21:45.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:21:57.780">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:21:57.780">Precondition check on 'All Channels Busy [True]'</msg>
<msg level="INFO" timestamp="20160901 16:21:57.780">All Channels Busy</msg>
<status endtime="20160901 16:21:57.780" starttime="20160901 16:21:45.048" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Stop All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:00.604">Warning pop-up Window found</msg>
<status endtime="20160901 16:22:00.604" starttime="20160901 16:21:57.780" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:13.014">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:22:13.045" starttime="20160901 16:22:00.604" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Stopped</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:13.060">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Stopped">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:25.657">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:22:25.672" starttime="20160901 16:22:13.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:22:25.672">'All Channels Stopped' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:22:25.672">Requirement check on 'All Channels Stopped [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160901 16:22:25.672">All Channels Stopped</msg>
<status endtime="20160901 16:22:25.672" starttime="20160901 16:22:13.045" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 2">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:25.735">${region} = R[17,142 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:22:25.735" starttime="20160901 16:22:25.688" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:28.790">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:22:28.821" starttime="20160901 16:22:25.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:22:28.821">${region} = R[17,142 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:22:28.821" starttime="20160901 16:22:25.688" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:34.687">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:22:34.687" starttime="20160901 16:22:28.821" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:34.703">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:37.805">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:22:37.821" starttime="20160901 16:22:34.718" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:22:37.821">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:22:37.821">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:22:37.821">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:37.837">Comparing as boolean values</msg>
<status endtime="20160901 16:22:37.837" starttime="20160901 16:22:37.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:22:37.837">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160901 16:22:37.837">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160901 16:22:37.852" starttime="20160901 16:22:34.687" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 3">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:37.899">${region} = R[17,208 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:22:37.899" starttime="20160901 16:22:37.868" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:40.995">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:22:41.027" starttime="20160901 16:22:37.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:22:41.027">${region} = R[17,208 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:22:41.027" starttime="20160901 16:22:37.852" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:45.735">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:22:45.735" starttime="20160901 16:22:41.027" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:45.751">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:48.837">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:22:48.853" starttime="20160901 16:22:45.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:22:48.853">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:22:48.853">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:22:48.853">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:48.868">Comparing as boolean values</msg>
<status endtime="20160901 16:22:48.868" starttime="20160901 16:22:48.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:22:48.884">Requirement check on 'Channel Busy ${region} [True] = True' after 3 seconds</msg>
<msg level="INFO" timestamp="20160901 16:22:48.884">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160901 16:22:48.884" starttime="20160901 16:22:45.735" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start All Channels">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:51.663">Warning pop-up Window found</msg>
<status endtime="20160901 16:22:51.663" starttime="20160901 16:22:48.884" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>All Channels Busy</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:22:51.678">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelRegion.All Channels Busy">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:23:04.424">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:23:04.439" starttime="20160901 16:22:51.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:23:04.439">'All Channels Busy' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:23:04.439">Requirement check on 'All Channels Busy [True]' after 12 seconds</msg>
<msg level="INFO" timestamp="20160901 16:23:04.439">All Channels Busy</msg>
<status endtime="20160901 16:23:04.439" starttime="20160901 16:22:51.663" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</tag>
<tag>default</tag>
<tag>known_issue</tag>
</tags>
<status critical="yes" endtime="20160901 16:23:04.455" starttime="20160901 16:21:32.581" status="PASS"></status>
</test>
<test name="Start a Channel with OperationMode Idle" id="s1-s1-s1-s2-t5">
<kw type="setup" name="ChannelRegion.Confirm All Errors">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:23:16.880">Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active
Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:23:16.895" starttime="20160901 16:23:04.471" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_Channel_1_Idle}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:23:21.607">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:23:21.607" starttime="20160901 16:23:16.911" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:23:36.607">Slept 15 seconds</msg>
<status endtime="20160901 16:23:36.607" starttime="20160901 16:23:21.607" status="PASS"></status>
</kw>
<status endtime="20160901 16:23:36.607" starttime="20160901 16:23:16.911" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:23:36.623">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_OperationModeIdle1.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160901 16:23:36.623" starttime="20160901 16:23:36.607" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:23:51.652">Slept 15 seconds</msg>
<status endtime="20160901 16:23:51.668" starttime="20160901 16:23:36.623" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:23:51.699" starttime="20160901 16:23:51.668" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:24:06.714">Slept 15 seconds</msg>
<status endtime="20160901 16:24:06.729" starttime="20160901 16:23:51.699" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:24:40.430">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:24:40.430" starttime="20160901 16:24:06.729" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:24:55.459">Slept 15 seconds</msg>
<status endtime="20160901 16:24:55.475" starttime="20160901 16:24:40.430" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:24:57.456">[log] CLICK on L(280,187)@S(0)[0,0 1460x963]
[log] CLICK on L(1147,188)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:24:57.456" starttime="20160901 16:24:55.475" status="PASS"></status>
</kw>
<status endtime="20160901 16:24:57.456" starttime="20160901 16:24:06.729" status="PASS"></status>
</kw>
<status endtime="20160901 16:24:57.472" starttime="20160901 16:23:36.623" status="PASS"></status>
</kw>
<status endtime="20160901 16:24:57.472" starttime="20160901 16:23:16.895" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:24:57.534">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:24:57.534" starttime="20160901 16:24:57.487" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:00.590">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:25:00.605" starttime="20160901 16:24:57.534" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:25:00.605">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:25:00.605" starttime="20160901 16:24:57.472" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Stopped</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelRegion.Channel Stopped">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:03.786">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:25:03.786" starttime="20160901 16:25:00.636" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:25:03.786">'Channel Stopped ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:25:03.802">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:25:03.802">Evaluating 'Channel Stopped ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:03.802">Comparing as boolean values</msg>
<status endtime="20160901 16:25:03.817" starttime="20160901 16:25:03.802" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:25:03.817">Requirement check on 'Channel Stopped ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:25:03.817">Channel Stopped, ${region}
        =, True, True</msg>
<status endtime="20160901 16:25:03.817" starttime="20160901 16:25:00.605" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Start Channel">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:09.878">Channel Confirm Error : Not active
Warning pop-up Window found</msg>
<status endtime="20160901 16:25:09.878" starttime="20160901 16:25:03.817" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Channel Busy</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelRegion.Channel Busy">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:13.049">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:25:13.065" starttime="20160901 16:25:09.909" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:25:13.065">'Channel Busy ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:25:13.065">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:25:13.065">Evaluating 'Channel Busy ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:13.080">Comparing as boolean values</msg>
<status endtime="20160901 16:25:13.080" starttime="20160901 16:25:13.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:25:13.080">Requirement check on 'Channel Busy ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:25:13.080">Channel Busy, ${region}
        =, True, True</msg>
<status endtime="20160901 16:25:13.080" starttime="20160901 16:25:09.894" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:16.715">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:25:16.715" starttime="20160901 16:25:13.111" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:31.731">Slept 15 seconds</msg>
<status endtime="20160901 16:25:31.762" starttime="20160901 16:25:16.715" status="PASS"></status>
</kw>
<status endtime="20160901 16:25:31.762" starttime="20160901 16:25:13.096" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:31.762">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160901 16:25:31.762" starttime="20160901 16:25:31.762" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:25:46.778">Slept 15 seconds</msg>
<status endtime="20160901 16:25:46.810" starttime="20160901 16:25:31.778" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:25:46.825" starttime="20160901 16:25:46.810" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:26:01.825">Slept 15 seconds</msg>
<status endtime="20160901 16:26:01.856" starttime="20160901 16:25:46.825" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:26:34.890">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:26:34.890" starttime="20160901 16:26:01.856" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:26:49.921">Slept 15 seconds</msg>
<status endtime="20160901 16:26:49.936" starttime="20160901 16:26:34.890" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:26:52.074">[log] CLICK on L(324,231)@S(0)[0,0 1460x963]
[log] CLICK on L(1191,232)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:26:52.074" starttime="20160901 16:26:49.936" status="PASS"></status>
</kw>
<status endtime="20160901 16:26:52.074" starttime="20160901 16:26:01.856" status="PASS"></status>
</kw>
<status endtime="20160901 16:26:52.089" starttime="20160901 16:25:31.778" status="PASS"></status>
</kw>
<status endtime="20160901 16:26:52.089" starttime="20160901 16:25:13.096" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>default</tag>
</tags>
<status critical="yes" endtime="20160901 16:26:52.089" starttime="20160901 16:23:04.455" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160901 16:26:52.105" starttime="20160901 16:17:02.953" status="PASS"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\02__Enable_and_Disable_Features.txt" name="Enable and Disable Features" id="s1-s1-s1-s3">
<kw type="setup" name="shared_keywords.Set Ceco Length">
<doc></doc>
<arguments>
<arg>${2Minutes}</arg>
</arguments>
<kw type="kw" name="${RestartRequired} = PCDetector.Set Ceco Length And Stop Application">
<doc></doc>
<arguments>
<arg>${CecoLength}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:26:59.006">Before checking the ceco
Scores 15_min_ceco=0.955177128315 and 2_min_ceco=0.911807954311 
Before finding settings area
Before finding settings input area
Before finding Dailog Button
Warning pop-up Window found</msg>
<msg level="INFO" timestamp="20160901 16:26:59.006">${RestartRequired} = True</msg>
<status endtime="20160901 16:26:59.006" starttime="20160901 16:26:52.386" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${RestartRequired}</arg>
<arg>Start PC Detector Application After 15 Seconds</arg>
</arguments>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:27:14.022">Slept 15 seconds</msg>
<status endtime="20160901 16:27:14.053" starttime="20160901 16:26:59.022" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:27:14.053" starttime="20160901 16:27:14.053" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:27:29.076">Slept 15 seconds</msg>
<status endtime="20160901 16:27:29.076" starttime="20160901 16:27:14.068" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:02.846">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:28:02.846" starttime="20160901 16:27:29.076" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:17.846">Slept 15 seconds</msg>
<status endtime="20160901 16:28:17.877" starttime="20160901 16:28:02.846" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:19.843">[log] CLICK on L(148,55)@S(0)[0,0 1460x963]
[log] CLICK on L(1015,56)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:28:19.843" starttime="20160901 16:28:17.877" status="PASS"></status>
</kw>
<status endtime="20160901 16:28:19.843" starttime="20160901 16:27:29.076" status="PASS"></status>
</kw>
<status endtime="20160901 16:28:19.843" starttime="20160901 16:26:59.022" status="PASS"></status>
</kw>
<status endtime="20160901 16:28:19.858" starttime="20160901 16:26:59.006" status="PASS"></status>
</kw>
<status endtime="20160901 16:28:19.858" starttime="20160901 16:26:52.370" status="PASS"></status>
</kw>
<test name="Enable Watermarking Feature Channel 1" id="s1-s1-s1-s3-t1">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:19.923">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:28:19.923" starttime="20160901 16:28:19.859" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:22.978">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:28:23.009" starttime="20160901 16:28:19.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:23.009">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:28:23.009" starttime="20160901 16:28:19.859" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:23.056" starttime="20160901 16:28:23.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:23.056">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:23.056">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:23.071">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:23.071">Comparing as boolean values</msg>
<status endtime="20160901 16:28:23.071" starttime="20160901 16:28:23.071" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:23.071">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:28:23.071">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:23.087" starttime="20160901 16:28:23.009" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Watermarking">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:25.957">Warning pop-up Window found</msg>
<status endtime="20160901 16:28:25.957" starttime="20160901 16:28:23.087" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is watermarking disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:25.973">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:26.004" starttime="20160901 16:28:25.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:26.020">'is watermarking disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:26.020">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:26.020">Evaluating 'is watermarking disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:26.020">Comparing as boolean values</msg>
<status endtime="20160901 16:28:26.035" starttime="20160901 16:28:26.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:26.035">Requirement check on 'is watermarking disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:28:26.035">Is Watermarking Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:26.035" starttime="20160901 16:28:25.957" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Watermarking">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:27.595">Warning pop-up Window found</msg>
<status endtime="20160901 16:28:27.595" starttime="20160901 16:28:26.035" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:27.611">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:27.642" starttime="20160901 16:28:27.626" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:27.642">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:27.642">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:27.642">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:27.658">Comparing as boolean values</msg>
<status endtime="20160901 16:28:27.658" starttime="20160901 16:28:27.658" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:27.658">Requirement check on 'is watermarking enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:28:27.658">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:27.658" starttime="20160901 16:28:27.595" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160901 16:28:27.658" starttime="20160901 16:28:19.858" status="PASS"></status>
</test>
<test name="Enable VFP Streaming Feature Channel 1" id="s1-s1-s1-s3-t2">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:27.720">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:28:27.720" starttime="20160901 16:28:27.689" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:30.776">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:28:30.807" starttime="20160901 16:28:27.736" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:30.807">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:28:30.807" starttime="20160901 16:28:27.673" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:30.870" starttime="20160901 16:28:30.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:30.870">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:30.870">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:30.870">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:30.885">Comparing as boolean values</msg>
<status endtime="20160901 16:28:30.885" starttime="20160901 16:28:30.870" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:30.885">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:28:30.885">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:30.885" starttime="20160901 16:28:30.823" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:32.445">Warning pop-up Window found</msg>
<status endtime="20160901 16:28:32.445" starttime="20160901 16:28:30.885" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:32.445">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:32.492" starttime="20160901 16:28:32.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:32.492">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:32.492">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:32.492">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:32.492">Comparing as boolean values</msg>
<status endtime="20160901 16:28:32.508" starttime="20160901 16:28:32.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:32.508">Requirement check on 'is rt vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:28:32.508">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:32.508" starttime="20160901 16:28:32.445" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:34.083">Warning pop-up Window found</msg>
<status endtime="20160901 16:28:34.083" starttime="20160901 16:28:32.508" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:34.099">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:34.130" starttime="20160901 16:28:34.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:34.146">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:34.146">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:34.146">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:34.146">Comparing as boolean values</msg>
<status endtime="20160901 16:28:34.161" starttime="20160901 16:28:34.146" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:34.161">Requirement check on 'is rt vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:28:34.161">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:34.161" starttime="20160901 16:28:34.083" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160901 16:28:34.161" starttime="20160901 16:28:27.673" status="PASS"></status>
</test>
<test name="Enable Thumbnail Capturing Feature Channel 1" id="s1-s1-s1-s3-t3">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:34.224">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:28:34.224" starttime="20160901 16:28:34.177" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:37.303">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:28:37.334" starttime="20160901 16:28:34.224" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:37.334">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:28:37.334" starttime="20160901 16:28:34.177" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:37.381" starttime="20160901 16:28:37.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:37.381">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:37.381">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:37.396">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:37.396">Comparing as boolean values</msg>
<status endtime="20160901 16:28:37.396" starttime="20160901 16:28:37.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:37.396">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:28:37.396">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:37.396" starttime="20160901 16:28:37.334" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:38.959">Warning pop-up Window found</msg>
<status endtime="20160901 16:28:38.959" starttime="20160901 16:28:37.412" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:40.990">Slept 2 seconds</msg>
<status endtime="20160901 16:28:41.005" starttime="20160901 16:28:38.959" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:41.083">${NrOfFiles} = 370</msg>
<status endtime="20160901 16:28:41.083" starttime="20160901 16:28:41.005" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:41.099">${NrOfThumbnails} = 370</msg>
<status endtime="20160901 16:28:41.099" starttime="20160901 16:28:38.959" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:41.099">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:28:41.146" starttime="20160901 16:28:41.115" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:41.146">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:28:41.146">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:28:41.146">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:28:41.161">Comparing as boolean values</msg>
<status endtime="20160901 16:28:41.161" starttime="20160901 16:28:41.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:28:41.161">Requirement check on 'is thumbnail disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:28:41.161">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:28:41.161" starttime="20160901 16:28:41.099" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 300 Seconds</arg>
<arg>=</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 300 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:33:41.206">Slept 5 minutes</msg>
<status endtime="20160901 16:33:41.206" starttime="20160901 16:28:41.193" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:33:41.253">${NrOfFiles} = 370</msg>
<status endtime="20160901 16:33:41.253" starttime="20160901 16:33:41.206" status="PASS"></status>
</kw>
<status endtime="20160901 16:33:41.253" starttime="20160901 16:28:41.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:33:41.253">'Generated Thumbnails For Channel 1 After 300 Seconds' is '370'</msg>
<msg level="INFO" timestamp="20160901 16:33:41.253">Interpreting '${NrOfThumbnails}' as fixed value '370'</msg>
<msg level="INFO" timestamp="20160901 16:33:41.253">Evaluating 'Generated Thumbnails For Channel 1 After 300 Seconds [370]' = '${NrOfThumbnails} [370]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>370</arg>
<arg>370</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:33:41.269">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:33:41.269" starttime="20160901 16:33:41.253" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:33:41.269">Requirement check on 'Generated Thumbnails For Channel 1 After 300 Seconds [370] = ${NrOfThumbnails} [370]'</msg>
<msg level="INFO" timestamp="20160901 16:33:41.269">Generated Thumbnails For Channel 1 After 300 Seconds
        =, 370, 370</msg>
<status endtime="20160901 16:33:41.269" starttime="20160901 16:28:41.161" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:33:42.875">Warning pop-up Window found</msg>
<status endtime="20160901 16:33:42.875" starttime="20160901 16:33:41.269" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:33:42.891">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:33:42.922" starttime="20160901 16:33:42.907" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:33:42.922">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:33:42.922">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:33:42.922">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:33:42.938">Comparing as boolean values</msg>
<status endtime="20160901 16:33:42.938" starttime="20160901 16:33:42.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:33:42.938">Requirement check on 'is thumbnail enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:33:42.938">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:33:42.938" starttime="20160901 16:33:42.875" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 300 Seconds</arg>
<arg>&gt;</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 300 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:42.983">Slept 5 minutes</msg>
<status endtime="20160901 16:38:42.983" starttime="20160901 16:33:42.969" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:43.014">${NrOfFiles} = 376</msg>
<status endtime="20160901 16:38:43.014" starttime="20160901 16:38:42.983" status="PASS"></status>
</kw>
<status endtime="20160901 16:38:43.014" starttime="20160901 16:33:42.953" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:38:43.029">'Generated Thumbnails For Channel 1 After 300 Seconds' is '376'</msg>
<msg level="INFO" timestamp="20160901 16:38:43.029">Interpreting '${NrOfThumbnails}' as fixed value '370'</msg>
<msg level="INFO" timestamp="20160901 16:38:43.029">Evaluating 'Generated Thumbnails For Channel 1 After 300 Seconds [376]' &gt; '${NrOfThumbnails} [370]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>376</arg>
<arg>370</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:43.029">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:38:43.029" starttime="20160901 16:38:43.029" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:38:43.045">Requirement check on 'Generated Thumbnails For Channel 1 After 300 Seconds [376] &gt; ${NrOfThumbnails} [370]'</msg>
<msg level="INFO" timestamp="20160901 16:38:43.045">Generated Thumbnails For Channel 1 After 300 Seconds
        &gt;, 376, 370</msg>
<status endtime="20160901 16:38:43.045" starttime="20160901 16:33:42.953" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
<tag>osprey</tag>
</tags>
<status critical="yes" endtime="20160901 16:38:43.045" starttime="20160901 16:28:34.161" status="PASS"></status>
</test>
<test name="Enable VFP CECO Feature Channel 1 for matrox" id="s1-s1-s1-s3-t4">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:43.123">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:38:43.123" starttime="20160901 16:38:43.061" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:46.163">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:38:46.195" starttime="20160901 16:38:43.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:38:46.195">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:38:46.195" starttime="20160901 16:38:43.061" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:38:46.241" starttime="20160901 16:38:46.210" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:38:46.241">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:38:46.241">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:38:46.241">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:46.241">Comparing as boolean values</msg>
<status endtime="20160901 16:38:46.257" starttime="20160901 16:38:46.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:38:46.257">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:38:46.257">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:38:46.257" starttime="20160901 16:38:46.195" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:47.848">Warning pop-up Window found</msg>
<status endtime="20160901 16:38:47.848" starttime="20160901 16:38:46.257" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:47.864">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:38:47.895" starttime="20160901 16:38:47.879" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:38:47.911">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:38:47.911">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:38:47.911">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:38:47.911">Comparing as boolean values</msg>
<status endtime="20160901 16:38:47.911" starttime="20160901 16:38:47.911" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:38:47.926">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:38:47.926">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:38:47.926" starttime="20160901 16:38:47.848" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:47.957">Slept 2 minutes</msg>
<status endtime="20160901 16:40:47.972" starttime="20160901 16:38:47.926" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:48.035">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<msg level="INFO" timestamp="20160901 16:40:48.035">${NrOfFiles} = 72</msg>
<status endtime="20160901 16:40:48.035" starttime="20160901 16:40:47.972" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:40:48.050">${NrOfCecoFiles} = 72</msg>
<status endtime="20160901 16:40:48.035" starttime="20160901 16:38:47.926" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:48.050">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:48.144">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:40:48.144" starttime="20160901 16:40:48.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:40:48.144">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:40:48.160">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:40:48.160">Evaluating 'Generated Ceco Files For Channel 1 [72]' = '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:48.160">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:40:48.160" starttime="20160901 16:40:48.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:40:48.160">Requirement check on 'Generated Ceco Files For Channel 1 [72] = ${NrOfCecoFiles} [72]' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:40:48.160">Generated CecoFiles For Channel, 1
        =, 72, 72</msg>
<status endtime="20160901 16:40:48.160" starttime="20160901 16:40:48.050" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:48.238">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<msg level="INFO" timestamp="20160901 16:40:48.238">${NrOfCecoFiles} = 72</msg>
<status endtime="20160901 16:40:48.238" starttime="20160901 16:40:48.175" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:49.813">Warning pop-up Window found</msg>
<status endtime="20160901 16:40:49.813" starttime="20160901 16:40:48.238" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:49.813">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:40:49.876" starttime="20160901 16:40:49.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:40:49.876">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:40:49.891">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:40:49.891">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:49.891">Comparing as boolean values</msg>
<status endtime="20160901 16:40:49.891" starttime="20160901 16:40:49.891" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:40:49.891">Requirement check on 'is vfp enabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:40:49.891">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:40:49.907" starttime="20160901 16:40:49.813" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>&gt;</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:49.907">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:49.985">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:40:49.985" starttime="20160901 16:40:49.922" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:40:49.985">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:40:49.985">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:40:50.000">Evaluating 'Generated Ceco Files For Channel 1 [72]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:50.000">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:40:50.000" starttime="20160901 16:40:50.000" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:55.071">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:40:55.071" starttime="20160901 16:40:55.009" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:40:55.071">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:40:55.071">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:40:55.071">Evaluating 'Generated Ceco Files For Channel 1 [72]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:40:55.071">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:40:55.087" starttime="20160901 16:40:55.071" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:00.159">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:41:00.159" starttime="20160901 16:41:00.097" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:41:00.159">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:00.159">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:00.159">Evaluating 'Generated Ceco Files For Channel 1 [72]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:00.175">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:41:00.175" starttime="20160901 16:41:00.159" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:05.262">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:41:05.262" starttime="20160901 16:41:05.184" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:41:05.278">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:05.278">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:05.278">Evaluating 'Generated Ceco Files For Channel 1 [72]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:05.278">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:41:05.278" starttime="20160901 16:41:05.278" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:10.363">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:41:10.363" starttime="20160901 16:41:10.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:41:10.363">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:10.363">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:10.363">Evaluating 'Generated Ceco Files For Channel 1 [72]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:10.363">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:41:10.379" starttime="20160901 16:41:10.363" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:30.522">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:41:30.522" starttime="20160901 16:41:30.459" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:41:30.522">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:30.522">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:30.522">Evaluating 'Generated Ceco Files For Channel 1 [72]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:30.522">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:41:30.522" starttime="20160901 16:41:30.522" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:50.682">Latest Ceco file:  F:\civolution\Data\WcD07681609011438_01.ce</msg>
<status endtime="20160901 16:41:50.682" starttime="20160901 16:41:50.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:41:50.682">'Generated Ceco Files For Channel 1' is '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:50.682">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:41:50.682">Evaluating 'Generated Ceco Files For Channel 1 [72]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>72</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:41:50.697">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:41:50.697" starttime="20160901 16:41:50.682" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:10.876">Latest Ceco file:  F:\civolution\Data\WcD07681609011440_01.ce</msg>
<status endtime="20160901 16:42:10.876" starttime="20160901 16:42:10.814" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:42:10.876">'Generated Ceco Files For Channel 1' is '73'</msg>
<msg level="INFO" timestamp="20160901 16:42:10.876">Interpreting '${NrOfCecoFiles}' as fixed value '72'</msg>
<msg level="INFO" timestamp="20160901 16:42:10.892">Evaluating 'Generated Ceco Files For Channel 1 [73]' &gt; '${NrOfCecoFiles} [72]'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>73</arg>
<arg>72</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:10.892">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:42:10.892" starttime="20160901 16:42:10.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:42:10.892">Requirement check on 'Generated Ceco Files For Channel 1 [73] &gt; ${NrOfCecoFiles} [72]' after 80 seconds</msg>
<msg level="INFO" timestamp="20160901 16:42:10.892">Generated CecoFiles For Channel, 1
        &gt;, 72, 72
        Generated CecoFiles For Channel, 1
        &gt;, 72, 72
        Generated CecoFiles For Channel, 1
        &gt;, 72, 72
        Generated CecoFiles For Channel, 1
        &gt;, 72, 72
        Generated CecoFiles For Channel, 1
        &gt;, 72, 72
        Generated CecoFiles For Channel, 1
        &gt;, 72, 72
        Generated CecoFiles For Channel, 1
        &gt;, 72, 72
        Generated CecoFiles For Channel, 1
        &gt;, 73, 72</msg>
<status endtime="20160901 16:42:10.892" starttime="20160901 16:40:49.907" status="PASS"></status>
</kw>
<kw type="kw" name="${CecoFile} = PCDetectorKeywords.Latest Ceco File For Channel">
<doc>Robot keyword: Get Name of Last Ceco File for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:10.939">${CecoFile} = F:\civolution\Data\WcD07681609011440_01.ce</msg>
<status endtime="20160901 16:42:10.939" starttime="20160901 16:42:10.907" status="PASS"></status>
</kw>
<kw type="kw" name="${Consistency}, ${VFP_blocks}, ${AFP_blocks} = bmcecocheck.Consistency Of Ceco File">
<doc>Robot keyword: Verify format of CECO file</doc>
<arguments>
<arg>${CecoFile}</arg>
<arg>${Verbose}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:11.032">${Consistency} = 0</msg>
<msg level="INFO" timestamp="20160901 16:42:11.032">${VFP_blocks} = 14</msg>
<msg level="INFO" timestamp="20160901 16:42:11.032">${AFP_blocks} = 0</msg>
<status endtime="20160901 16:42:11.032" starttime="20160901 16:42:10.939" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${Consistency}</arg>
<arg>=</arg>
<arg>${OK}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:11.048">Interpreting '${Consistency}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160901 16:42:11.048">Interpreting '${OK}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160901 16:42:11.048">Evaluating '${Consistency} [0]' = '${OK} [0]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:11.048">Comparing as integer values</msg>
<status endtime="20160901 16:42:11.063" starttime="20160901 16:42:11.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:42:11.063">Requirement check on '${Consistency} [0] = ${OK} [0]'</msg>
<msg level="INFO" timestamp="20160901 16:42:11.063">=, 0, 0</msg>
<status endtime="20160901 16:42:11.063" starttime="20160901 16:42:11.032" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${VFP_blocks}</arg>
<arg>&gt;</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:11.079">Interpreting '${VFP_blocks}' as fixed value '14'</msg>
<msg level="INFO" timestamp="20160901 16:42:11.079">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:42:11.079">Evaluating '${VFP_blocks} [14]' &gt; '0'</msg>
<kw type="kw" name="CheckOperator.&gt;">
<doc>Checks whether the left side is greater than or larger than the right side [&gt;]</doc>
<arguments>
<arg>14</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:11.079">Comparing as integer values</msg>
<status endtime="20160901 16:42:11.079" starttime="20160901 16:42:11.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:42:11.095">Requirement check on '${VFP_blocks} [14] &gt; 0'</msg>
<msg level="INFO" timestamp="20160901 16:42:11.095">&gt;, 14, 0</msg>
<status endtime="20160901 16:42:11.095" starttime="20160901 16:42:11.063" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${AFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:11.095">Interpreting '${AFP_blocks}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160901 16:42:11.110">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:42:11.110">Evaluating '${AFP_blocks} [0]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:11.110">Comparing as integer values</msg>
<status endtime="20160901 16:42:11.110" starttime="20160901 16:42:11.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:42:11.110">Requirement check on '${AFP_blocks} [0] = 0'</msg>
<msg level="INFO" timestamp="20160901 16:42:11.110">=, 0, 0</msg>
<status endtime="20160901 16:42:11.110" starttime="20160901 16:42:11.095" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:42:11.126" starttime="20160901 16:38:43.045" status="PASS"></status>
</test>
<test name="Enable VFP Features Channel 1, License Does Not Support VFP Feature for matrox" id="s1-s1-s1-s3-t5">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_VFP_RTVFP}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:14.917">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:42:14.917" starttime="20160901 16:42:11.141" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:29.946">Slept 15 seconds</msg>
<status endtime="20160901 16:42:29.962" starttime="20160901 16:42:14.932" status="PASS"></status>
</kw>
<status endtime="20160901 16:42:29.962" starttime="20160901 16:42:11.141" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:29.962">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_VFP_RTVFP.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160901 16:42:29.962" starttime="20160901 16:42:29.962" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:42:44.978">Slept 15 seconds</msg>
<status endtime="20160901 16:42:45.010" starttime="20160901 16:42:29.978" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:42:45.010" starttime="20160901 16:42:45.010" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:00.057">Slept 15 seconds</msg>
<status endtime="20160901 16:43:00.057" starttime="20160901 16:42:45.025" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:33.792">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:43:33.792" starttime="20160901 16:43:00.057" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:48.808">Slept 15 seconds</msg>
<status endtime="20160901 16:43:48.840" starttime="20160901 16:43:33.792" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:50.790">[log] CLICK on L(192,99)@S(0)[0,0 1460x963]
[log] CLICK on L(1059,100)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:43:50.790" starttime="20160901 16:43:48.840" status="PASS"></status>
</kw>
<status endtime="20160901 16:43:50.790" starttime="20160901 16:43:00.057" status="PASS"></status>
</kw>
<status endtime="20160901 16:43:50.790" starttime="20160901 16:42:29.978" status="PASS"></status>
</kw>
<status endtime="20160901 16:43:50.805" starttime="20160901 16:42:11.126" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:50.852">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:43:50.852" starttime="20160901 16:43:50.805" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:53.892">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:43:53.923" starttime="20160901 16:43:50.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:53.923">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:43:53.923" starttime="20160901 16:43:50.805" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:53.970" starttime="20160901 16:43:53.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:53.970">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:53.970">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:53.970">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:53.970">Comparing as boolean values</msg>
<status endtime="20160901 16:43:53.986" starttime="20160901 16:43:53.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:53.986">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:53.986">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:53.986" starttime="20160901 16:43:53.923" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:54.017" starttime="20160901 16:43:54.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.017">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.032">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:54.032">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:54.032">Comparing as boolean values</msg>
<status endtime="20160901 16:43:54.032" starttime="20160901 16:43:54.032" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.032">Precondition check on 'is vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.032">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:54.032" starttime="20160901 16:43:53.986" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:54.079" starttime="20160901 16:43:54.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.079">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.079">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:54.079">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:54.095">Comparing as boolean values</msg>
<status endtime="20160901 16:43:54.095" starttime="20160901 16:43:54.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.095">Precondition check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.095">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:54.095" starttime="20160901 16:43:54.048" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:54.142" starttime="20160901 16:43:54.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.142">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.157">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:54.157">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:54.157">Comparing as boolean values</msg>
<status endtime="20160901 16:43:54.157" starttime="20160901 16:43:54.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.157">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.157">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:54.173" starttime="20160901 16:43:54.095" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:54.204" starttime="20160901 16:43:54.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.204">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.220">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:54.220">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:54.220">Comparing as boolean values</msg>
<status endtime="20160901 16:43:54.220" starttime="20160901 16:43:54.220" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.220">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.220">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:54.220" starttime="20160901 16:43:54.173" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:54.266" starttime="20160901 16:43:54.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.266">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.266">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:54.266">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:54.266">Comparing as boolean values</msg>
<status endtime="20160901 16:43:54.282" starttime="20160901 16:43:54.266" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.282">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.282">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:54.282" starttime="20160901 16:43:54.235" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:54.313" starttime="20160901 16:43:54.298" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.329">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.329">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:54.329">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:54.329">Comparing as boolean values</msg>
<status endtime="20160901 16:43:54.329" starttime="20160901 16:43:54.329" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.329">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.344">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:54.344" starttime="20160901 16:43:54.282" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:43:54.376" starttime="20160901 16:43:54.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.391">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.391">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:43:54.391">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:54.391">Comparing as boolean values</msg>
<status endtime="20160901 16:43:54.391" starttime="20160901 16:43:54.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:43:54.391">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:43:54.391">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:43:54.407" starttime="20160901 16:43:54.344" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:43:58.464">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160901 16:43:58.464" starttime="20160901 16:43:54.407" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.318">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160901 16:44:02.318" starttime="20160901 16:43:58.464" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.380">Latest Ceco file:  F:\civolution\Data\WcD07681609011442_01.ce</msg>
<msg level="INFO" timestamp="20160901 16:44:02.380">${NrOfCecoFiles} = 74</msg>
<status endtime="20160901 16:44:02.380" starttime="20160901 16:44:02.318" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.396">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:44:02.427" starttime="20160901 16:44:02.412" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:44:02.427">'is vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:44:02.427">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:44:02.427">Evaluating 'is vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.443">Comparing as boolean values</msg>
<status endtime="20160901 16:44:02.443" starttime="20160901 16:44:02.427" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:44:02.443">Requirement check on 'is vfp disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:44:02.443">Is Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:44:02.443" starttime="20160901 16:44:02.380" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:44:02.490" starttime="20160901 16:44:02.474" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:44:02.490">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:44:02.505">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:44:02.505">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.505">Comparing as boolean values</msg>
<status endtime="20160901 16:44:02.505" starttime="20160901 16:44:02.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:44:02.505">Requirement check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:44:02.505">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:44:02.505" starttime="20160901 16:44:02.458" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.521">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.599">Latest Ceco file:  F:\civolution\Data\WcD07681609011442_01.ce</msg>
<status endtime="20160901 16:44:02.599" starttime="20160901 16:44:02.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:44:02.599">'Generated Ceco Files For Channel 1' is '74'</msg>
<msg level="INFO" timestamp="20160901 16:44:02.599">Interpreting '${NrOfCecoFiles}' as fixed value '74'</msg>
<msg level="INFO" timestamp="20160901 16:44:02.599">Evaluating 'Generated Ceco Files For Channel 1 [74]' = '${NrOfCecoFiles} [74]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>74</arg>
<arg>74</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:02.599">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:44:02.614" starttime="20160901 16:44:02.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:44:02.614">Requirement check on 'Generated Ceco Files For Channel 1 [74] = ${NrOfCecoFiles} [74]' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:44:02.614">Generated CecoFiles For Channel, 1
        =, 74, 74</msg>
<status endtime="20160901 16:44:02.614" starttime="20160901 16:44:02.521" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:04.986">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:44:04.986" starttime="20160901 16:44:02.614" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:20.015">Slept 15 seconds</msg>
<status endtime="20160901 16:44:20.031" starttime="20160901 16:44:04.986" status="PASS"></status>
</kw>
<status endtime="20160901 16:44:20.031" starttime="20160901 16:44:02.614" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:20.031">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160901 16:44:20.031" starttime="20160901 16:44:20.031" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:35.046">Slept 15 seconds</msg>
<status endtime="20160901 16:44:35.078" starttime="20160901 16:44:20.046" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:44:35.078" starttime="20160901 16:44:35.078" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:44:50.093">Slept 15 seconds</msg>
<status endtime="20160901 16:44:50.109" starttime="20160901 16:44:35.078" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:45:24.002">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:45:24.002" starttime="20160901 16:44:50.124" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:45:39.002">Slept 15 seconds</msg>
<status endtime="20160901 16:45:39.017" starttime="20160901 16:45:24.002" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:45:40.998">[log] CLICK on L(236,143)@S(0)[0,0 1460x963]
[log] CLICK on L(1103,144)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:45:40.998" starttime="20160901 16:45:39.033" status="PASS"></status>
</kw>
<status endtime="20160901 16:45:40.998" starttime="20160901 16:44:50.124" status="PASS"></status>
</kw>
<status endtime="20160901 16:45:40.998" starttime="20160901 16:44:20.031" status="PASS"></status>
</kw>
<status endtime="20160901 16:45:40.998" starttime="20160901 16:44:02.614" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:45:41.014" starttime="20160901 16:42:11.126" status="PASS"></status>
</test>
<test name="Enable VFP Streaming Channel 1, Configuration Does Not Support VFP Streaming for matrox" id="s1-s1-s1-s3-t6">
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_No_VFP_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:45:43.385">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:45:43.385" starttime="20160901 16:45:41.030" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:45:58.400">Slept 15 seconds</msg>
<status endtime="20160901 16:45:58.415" starttime="20160901 16:45:43.385" status="PASS"></status>
</kw>
<status endtime="20160901 16:45:58.415" starttime="20160901 16:45:41.030" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:45:58.415">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_CCStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160901 16:45:58.415" starttime="20160901 16:45:58.415" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:46:13.446">Slept 15 seconds</msg>
<status endtime="20160901 16:46:13.462" starttime="20160901 16:45:58.431" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:46:13.477" starttime="20160901 16:46:13.462" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:46:28.477">Slept 15 seconds</msg>
<status endtime="20160901 16:46:28.493" starttime="20160901 16:46:13.477" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:02.210">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:47:02.210" starttime="20160901 16:46:28.508" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:17.210">Slept 15 seconds</msg>
<status endtime="20160901 16:47:17.241" starttime="20160901 16:47:02.210" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:19.206">[log] CLICK on L(280,187)@S(0)[0,0 1460x963]
[log] CLICK on L(1147,188)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:47:19.206" starttime="20160901 16:47:17.241" status="PASS"></status>
</kw>
<status endtime="20160901 16:47:19.206" starttime="20160901 16:46:28.508" status="PASS"></status>
</kw>
<status endtime="20160901 16:47:19.206" starttime="20160901 16:45:58.415" status="PASS"></status>
</kw>
<status endtime="20160901 16:47:19.222" starttime="20160901 16:45:41.014" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:19.269">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:47:19.269" starttime="20160901 16:47:19.222" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.383">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:47:22.398" starttime="20160901 16:47:19.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.398">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:47:22.398" starttime="20160901 16:47:19.222" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.445" starttime="20160901 16:47:22.414" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.445">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.445">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.445">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.445">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.461" starttime="20160901 16:47:22.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.461">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.461">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.461" starttime="20160901 16:47:22.398" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.507" starttime="20160901 16:47:22.476" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.507">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.507">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.507">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.523">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.523" starttime="20160901 16:47:22.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.523">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.523">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.523" starttime="20160901 16:47:22.461" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.570" starttime="20160901 16:47:22.539" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.570">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.570">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.570">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.585">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.585" starttime="20160901 16:47:22.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.585">Precondition check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.585">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.585" starttime="20160901 16:47:22.523" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.632" starttime="20160901 16:47:22.601" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.632">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.632">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.632">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.632">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.632" starttime="20160901 16:47:22.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.648">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.648">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.648" starttime="20160901 16:47:22.585" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.679" starttime="20160901 16:47:22.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.679">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.679">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.679">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.695">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.695" starttime="20160901 16:47:22.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.695">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.695">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.695" starttime="20160901 16:47:22.648" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.741" starttime="20160901 16:47:22.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.741">'is thumbnail enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.741">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.741">Evaluating 'is thumbnail enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.741">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.757" starttime="20160901 16:47:22.741" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.757">Precondition check on 'is thumbnail enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.757">Is Thumbnail Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.757" starttime="20160901 16:47:22.710" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.804" starttime="20160901 16:47:22.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.804">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.804">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.804">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.819">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.819" starttime="20160901 16:47:22.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.819">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.819">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.819" starttime="20160901 16:47:22.757" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:22.866" starttime="20160901 16:47:22.851" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.866">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.866">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:22.882">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:22.882">Comparing as boolean values</msg>
<status endtime="20160901 16:47:22.882" starttime="20160901 16:47:22.882" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:22.882">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:22.882">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:22.882" starttime="20160901 16:47:22.819" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:26.891">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160901 16:47:26.891" starttime="20160901 16:47:22.882" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt vfp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:47:26.938" starttime="20160901 16:47:26.907" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:26.938">'is rt vfp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:47:26.938">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:47:26.938">Evaluating 'is rt vfp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:26.938">Comparing as boolean values</msg>
<status endtime="20160901 16:47:26.938" starttime="20160901 16:47:26.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:47:26.953">Requirement check on 'is rt vfp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:47:26.953">Is Rt Vfp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:47:26.953" starttime="20160901 16:47:26.891" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace Configuration File">
<doc></doc>
<arguments>
<arg>${Configuration_All_Streaming_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:29.325">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:47:29.325" starttime="20160901 16:47:26.953" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:44.325">Slept 15 seconds</msg>
<status endtime="20160901 16:47:44.357" starttime="20160901 16:47:29.325" status="PASS"></status>
</kw>
<status endtime="20160901 16:47:44.357" starttime="20160901 16:47:26.953" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy Configuration File">
<doc>Robot keyword: Replace Configuration File in installation folder with Configuration from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:44.357">SourceFile:  C:\PCDetector_Testing\Testing\Resources\ConfigurationFiles\TTX_WatercastProp_AllStreaming1234.cfg
DestinationFile:  F:\civolution\Cfg\TTX_WatercastProp.cfg
FileExists value:  True</msg>
<status endtime="20160901 16:47:44.357" starttime="20160901 16:47:44.357" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:47:59.372">Slept 15 seconds</msg>
<status endtime="20160901 16:47:59.388" starttime="20160901 16:47:44.372" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:47:59.403" starttime="20160901 16:47:59.403" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:48:14.434">Slept 15 seconds</msg>
<status endtime="20160901 16:48:14.449" starttime="20160901 16:47:59.403" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:48:48.045">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:48:48.045" starttime="20160901 16:48:14.449" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:49:03.045">Slept 15 seconds</msg>
<status endtime="20160901 16:49:03.061" starttime="20160901 16:48:48.045" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:49:05.058">[log] CLICK on L(324,231)@S(0)[0,0 1460x963]
[log] CLICK on L(1191,232)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:49:05.058" starttime="20160901 16:49:03.076" status="PASS"></status>
</kw>
<status endtime="20160901 16:49:05.058" starttime="20160901 16:48:14.449" status="PASS"></status>
</kw>
<status endtime="20160901 16:49:05.058" starttime="20160901 16:47:44.372" status="PASS"></status>
</kw>
<status endtime="20160901 16:49:05.073" starttime="20160901 16:47:26.953" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:49:05.073" starttime="20160901 16:45:41.014" status="PASS"></status>
</test>
<test name="Verify AFP CECO Feature Channel 1 for matrox" id="s1-s1-s1-s3-t7">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:49:05.136">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:49:05.136" starttime="20160901 16:49:05.089" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:49:08.324">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:49:08.356" starttime="20160901 16:49:05.136" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:49:08.356">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:49:08.356" starttime="20160901 16:49:05.089" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:49:08.402" starttime="20160901 16:49:08.371" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:49:08.402">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:49:08.402">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:49:08.402">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:49:08.418">Comparing as boolean values</msg>
<status endtime="20160901 16:49:08.418" starttime="20160901 16:49:08.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:49:08.418">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:49:08.418">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:49:08.418" starttime="20160901 16:49:08.356" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:49:08.465" starttime="20160901 16:49:08.434" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:49:08.465">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:49:08.465">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:49:08.465">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:49:08.480">Comparing as boolean values</msg>
<status endtime="20160901 16:49:08.480" starttime="20160901 16:49:08.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:49:08.480">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:49:08.480">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:49:08.480" starttime="20160901 16:49:08.418" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfCecoFiles} = shared_keywords.Generated Ceco Files For Channel 1 After 120 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:08.496">Slept 2 minutes</msg>
<status endtime="20160901 16:51:08.528" starttime="20160901 16:49:08.496" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:08.621">Latest Ceco file:  F:\civolution\Data\WcD07681609011448_01.ce</msg>
<msg level="INFO" timestamp="20160901 16:51:08.621">${NrOfFiles} = 77</msg>
<status endtime="20160901 16:51:08.621" starttime="20160901 16:51:08.528" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:51:08.621">${NrOfCecoFiles} = 77</msg>
<status endtime="20160901 16:51:08.621" starttime="20160901 16:49:08.480" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Disable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.632">Warning pop-up Window found</msg>
<status endtime="20160901 16:51:11.632" starttime="20160901 16:51:08.621" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Ceco Files For Channel</arg>
<arg>1</arg>
<arg>=</arg>
<arg>${NrOfCecoFiles}</arg>
<arg>within</arg>
<arg>300 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.648">Interpreting '300 sec' as fixed value</msg>
<kw type="kw" name="PCDetectorKeywords.Generated CecoFiles For Channel">
<doc>Robot keyword: Get Number of Generated Ceco Files for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.726">Latest Ceco file:  F:\civolution\Data\WcD07681609011448_01.ce</msg>
<status endtime="20160901 16:51:11.726" starttime="20160901 16:51:11.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:51:11.726">'Generated Ceco Files For Channel 1' is '77'</msg>
<msg level="INFO" timestamp="20160901 16:51:11.726">Interpreting '${NrOfCecoFiles}' as fixed value '77'</msg>
<msg level="INFO" timestamp="20160901 16:51:11.726">Evaluating 'Generated Ceco Files For Channel 1 [77]' = '${NrOfCecoFiles} [77]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>77</arg>
<arg>77</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.726">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:51:11.741" starttime="20160901 16:51:11.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:51:11.741">Requirement check on 'Generated Ceco Files For Channel 1 [77] = ${NrOfCecoFiles} [77]' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:51:11.741">Generated CecoFiles For Channel, 1
        =, 77, 77</msg>
<status endtime="20160901 16:51:11.741" starttime="20160901 16:51:11.632" status="PASS"></status>
</kw>
<kw type="kw" name="${CecoFile} = PCDetectorKeywords.Latest Ceco File For Channel">
<doc>Robot keyword: Get Name of Last Ceco File for a Channel</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.772">${CecoFile} = F:\civolution\Data\WcD07681609011448_01.ce</msg>
<status endtime="20160901 16:51:11.772" starttime="20160901 16:51:11.741" status="PASS"></status>
</kw>
<kw type="kw" name="${Consistency}, ${VFP_blocks}, ${AFP_blocks} = bmcecocheck.Consistency Of Ceco File">
<doc>Robot keyword: Verify format of CECO file</doc>
<arguments>
<arg>${CecoFile}</arg>
<arg>${Verbose}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.850">${Consistency} = 0</msg>
<msg level="INFO" timestamp="20160901 16:51:11.850">${VFP_blocks} = 18</msg>
<msg level="INFO" timestamp="20160901 16:51:11.850">${AFP_blocks} = 0</msg>
<status endtime="20160901 16:51:11.850" starttime="20160901 16:51:11.788" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${Consistency}</arg>
<arg>=</arg>
<arg>${OK}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.850">Interpreting '${Consistency}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160901 16:51:11.866">Interpreting '${OK}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160901 16:51:11.866">Evaluating '${Consistency} [0]' = '${OK} [0]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.866">Comparing as integer values</msg>
<status endtime="20160901 16:51:11.866" starttime="20160901 16:51:11.866" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:51:11.866">Requirement check on '${Consistency} [0] = ${OK} [0]'</msg>
<msg level="INFO" timestamp="20160901 16:51:11.866">=, 0, 0</msg>
<status endtime="20160901 16:51:11.866" starttime="20160901 16:51:11.850" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${VFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.882">Interpreting '${VFP_blocks}' as fixed value '18'</msg>
<msg level="INFO" timestamp="20160901 16:51:11.882">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:51:11.882">Evaluating '${VFP_blocks} [18]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>18</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:11.882">Comparing as integer values</msg>
<status endtime="20160901 16:51:11.897" starttime="20160901 16:51:11.882" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:51:11.913">=, 18, 0</msg>
<msg level="FAIL" timestamp="20160901 16:51:11.913">CheckFailed: Requirement check on '${VFP_blocks} [18] = 0'</msg>
<msg level="INFO" timestamp="20160901 16:51:11.913">Saving screenshot Enable and Disable Features-Verify AFP CECO Feature Channel 1 for matrox-=_20160901-16h51m11.913.png</msg>
<msg level="INFO" html="yes" timestamp="20160901 16:51:12.209">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="Enable and Disable Features-Verify AFP CECO Feature Channel 1 for matrox-=_20160901-16h51m11.913.png"&gt;&lt;img src="Enable and Disable Features-Verify AFP CECO Feature Channel 1 for matrox-=_20160901-16h51m11.913.png" width="800px"&gt;&lt;/a&gt;</msg>
<status endtime="20160901 16:51:11.913" starttime="20160901 16:51:11.866" status="FAIL"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>${AFP_blocks}</arg>
<arg>=</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:12.209">Interpreting '${AFP_blocks}' as fixed value '0'</msg>
<msg level="INFO" timestamp="20160901 16:51:12.225">Interpreting '0' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:51:12.225">Evaluating '${AFP_blocks} [0]' = '0'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>0</arg>
<arg>0</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:12.225">Comparing as integer values</msg>
<status endtime="20160901 16:51:12.225" starttime="20160901 16:51:12.225" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:51:12.225">Requirement check on '${AFP_blocks} [0] = 0'</msg>
<msg level="INFO" timestamp="20160901 16:51:12.225">=, 0, 0</msg>
<status endtime="20160901 16:51:12.240" starttime="20160901 16:51:12.209" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Vfp Ceco">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:13.816">Warning pop-up Window found</msg>
<status endtime="20160901 16:51:13.816" starttime="20160901 16:51:12.240" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:51:13.816" starttime="20160901 16:49:05.073" status="FAIL">CheckFailed: Requirement check on '${VFP_blocks} [18] = 0'</status>
</test>
<test name="Enable Thumbnail Capturing Feature Channel 1-Matrox, License Does Not Support Thumbnail Feature" id="s1-s1-s1-s3-t8">
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_without_Thumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:17.513">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:51:17.513" starttime="20160901 16:51:13.832" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:32.529">Slept 15 seconds</msg>
<status endtime="20160901 16:51:32.545" starttime="20160901 16:51:17.513" status="PASS"></status>
</kw>
<status endtime="20160901 16:51:32.560" starttime="20160901 16:51:13.832" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:32.560">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_Without_Thumbnails.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160901 16:51:32.560" starttime="20160901 16:51:32.560" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:51:47.591">Slept 15 seconds</msg>
<status endtime="20160901 16:51:47.606" starttime="20160901 16:51:32.576" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:51:47.606" starttime="20160901 16:51:47.606" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:02.622">Slept 15 seconds</msg>
<status endtime="20160901 16:52:02.637" starttime="20160901 16:51:47.622" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:36.307">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:52:36.307" starttime="20160901 16:52:02.653" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:51.321">Slept 15 seconds</msg>
<status endtime="20160901 16:52:51.337" starttime="20160901 16:52:36.307" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:53.302">[log] CLICK on L(148,55)@S(0)[0,0 1460x963]
[log] CLICK on L(1015,56)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:52:53.302" starttime="20160901 16:52:51.337" status="PASS"></status>
</kw>
<status endtime="20160901 16:52:53.302" starttime="20160901 16:52:02.653" status="PASS"></status>
</kw>
<status endtime="20160901 16:52:53.302" starttime="20160901 16:51:32.560" status="PASS"></status>
</kw>
<status endtime="20160901 16:52:53.302" starttime="20160901 16:51:13.832" status="PASS"></status>
</kw>
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:53.365">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:52:53.365" starttime="20160901 16:52:53.318" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.526">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:52:56.557" starttime="20160901 16:52:53.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.557">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:52:56.557" starttime="20160901 16:52:53.318" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is watermarking enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Watermarking Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:56.604" starttime="20160901 16:52:56.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.604">'is watermarking enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.604">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:56.604">Evaluating 'is watermarking enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.604">Comparing as boolean values</msg>
<status endtime="20160901 16:52:56.604" starttime="20160901 16:52:56.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.619">Precondition check on 'is watermarking enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.619">Is Watermarking Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:56.619" starttime="20160901 16:52:56.557" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:56.650" starttime="20160901 16:52:56.635" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.650">'is vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.666">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:56.666">Evaluating 'is vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.666">Comparing as boolean values</msg>
<status endtime="20160901 16:52:56.682" starttime="20160901 16:52:56.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.682">Precondition check on 'is vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.682">Is Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:56.682" starttime="20160901 16:52:56.619" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt vfp enabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Vfp Enabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:56.728" starttime="20160901 16:52:56.697" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.728">'is rt vfp enabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.728">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:56.728">Evaluating 'is rt vfp enabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.744">Comparing as boolean values</msg>
<status endtime="20160901 16:52:56.744" starttime="20160901 16:52:56.728" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.744">Precondition check on 'is rt vfp enabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.744">Is Rt Vfp Enabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:56.744" starttime="20160901 16:52:56.682" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:56.791" starttime="20160901 16:52:56.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.791">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.791">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:56.791">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.791">Comparing as boolean values</msg>
<status endtime="20160901 16:52:56.806" starttime="20160901 16:52:56.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.806">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.806">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:56.806" starttime="20160901 16:52:56.744" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:56.853" starttime="20160901 16:52:56.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.853">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.853">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:56.853">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.853">Comparing as boolean values</msg>
<status endtime="20160901 16:52:56.853" starttime="20160901 16:52:56.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.869">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.869">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:56.869" starttime="20160901 16:52:56.806" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:56.900" starttime="20160901 16:52:56.884" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.900">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.916">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:56.916">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.916">Comparing as boolean values</msg>
<status endtime="20160901 16:52:56.916" starttime="20160901 16:52:56.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.916">Precondition check on 'is thumbnail disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.916">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:56.916" starttime="20160901 16:52:56.869" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:56.962" starttime="20160901 16:52:56.947" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.962">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.962">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:56.978">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:56.978">Comparing as boolean values</msg>
<status endtime="20160901 16:52:56.994" starttime="20160901 16:52:56.978" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:56.994">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:56.994">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:56.994" starttime="20160901 16:52:56.931" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:52:57.040" starttime="20160901 16:52:57.009" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:57.040">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:52:57.040">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:52:57.040">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:57.056">Comparing as boolean values</msg>
<status endtime="20160901 16:52:57.056" starttime="20160901 16:52:57.040" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:57.056">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:52:57.056">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:52:57.056" starttime="20160901 16:52:56.994" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfThumbnails} = shared_keywords.Generated Thumbnails For Channel 1 After 2 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:59.072">Slept 2 seconds</msg>
<status endtime="20160901 16:52:59.074" starttime="20160901 16:52:57.072" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:52:59.113">${NrOfFiles} = 385</msg>
<status endtime="20160901 16:52:59.112" starttime="20160901 16:52:59.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:52:59.145">${NrOfThumbnails} = 385</msg>
<status endtime="20160901 16:52:59.145" starttime="20160901 16:52:57.056" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Thumbnail Capturing">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:53:03.123">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160901 16:53:03.123" starttime="20160901 16:52:59.145" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is thumbnail disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
<arg>within</arg>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:53:03.123">Interpreting '2 sec' as fixed value</msg>
<kw type="kw" name="ChannelFeatureRegion.Is Thumbnail Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:53:03.170" starttime="20160901 16:53:03.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:53:03.170">'is thumbnail disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:53:03.170">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:53:03.170">Evaluating 'is thumbnail disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:53:03.186">Comparing as boolean values</msg>
<status endtime="20160901 16:53:03.186" starttime="20160901 16:53:03.170" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:53:03.186">Precondition check on 'is thumbnail disabled ${region} [True] = True' after 0 seconds</msg>
<msg level="INFO" timestamp="20160901 16:53:03.186">Is Thumbnail Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:53:03.186" starttime="20160901 16:53:03.123" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>Generated Thumbnails For Channel 1 After 60 Seconds</arg>
<arg>=</arg>
<arg>${NrOfThumbnails}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Generated Thumbnails For Channel 1 After 60 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:03.217">Slept 1 minute</msg>
<status endtime="20160901 16:54:03.248" starttime="20160901 16:53:03.201" status="PASS"></status>
</kw>
<kw type="kw" name="${NrOfFiles} = PCDetectorKeywords.Generated Thumbnails For Channel">
<doc>Robot keyword: Get Number of Generated Thumbnails for a Channel</doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:03.279">${NrOfFiles} = 385</msg>
<status endtime="20160901 16:54:03.279" starttime="20160901 16:54:03.248" status="PASS"></status>
</kw>
<status endtime="20160901 16:54:03.279" starttime="20160901 16:53:03.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:54:03.279">'Generated Thumbnails For Channel 1 After 60 Seconds' is '385'</msg>
<msg level="INFO" timestamp="20160901 16:54:03.295">Interpreting '${NrOfThumbnails}' as fixed value '385'</msg>
<msg level="INFO" timestamp="20160901 16:54:03.295">Evaluating 'Generated Thumbnails For Channel 1 After 60 Seconds [385]' = '${NrOfThumbnails} [385]'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>385</arg>
<arg>385</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:03.295">Comparing evaluated keyword values</msg>
<status endtime="20160901 16:54:03.295" starttime="20160901 16:54:03.295" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:54:03.295">Requirement check on 'Generated Thumbnails For Channel 1 After 60 Seconds [385] = ${NrOfThumbnails} [385]'</msg>
<msg level="INFO" timestamp="20160901 16:54:03.295">Generated Thumbnails For Channel 1 After 60 Seconds
        =, 385, 385</msg>
<status endtime="20160901 16:54:03.295" starttime="20160901 16:53:03.186" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Replace License File">
<doc></doc>
<arguments>
<arg>${License_All_Features_Active}</arg>
</arguments>
<kw type="kw" name="shared_keywords.Stop PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:05.668">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(781,525)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:54:05.668" starttime="20160901 16:54:03.311" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:20.684">Slept 15 seconds</msg>
<status endtime="20160901 16:54:20.700" starttime="20160901 16:54:05.668" status="PASS"></status>
</kw>
<status endtime="20160901 16:54:20.715" starttime="20160901 16:54:03.311" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Copy License File">
<doc>Robot keyword: Replace License in installation folder with license from repository</doc>
<arguments>
<arg>${filename}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:20.715">SourceFile:  C:\PCDetector_Testing\Testing\Resources\LicenseFiles\TeletraxCVBSSVIDDetector_All_Features_Activated.lic
DestinationFile:  F:\civolution\TeletraxCVBSSVIDDetector.lic
FileExists value:  True</msg>
<status endtime="20160901 16:54:20.715" starttime="20160901 16:54:20.715" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:35.731">Slept 15 seconds</msg>
<status endtime="20160901 16:54:35.746" starttime="20160901 16:54:20.731" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:54:35.762" starttime="20160901 16:54:35.762" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:54:50.792">Slept 15 seconds</msg>
<status endtime="20160901 16:54:50.807" starttime="20160901 16:54:35.762" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:24.530">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:55:24.530" starttime="20160901 16:54:50.807" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:39.530">Slept 15 seconds</msg>
<status endtime="20160901 16:55:39.561" starttime="20160901 16:55:24.530" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:41.702">[log] CLICK on L(192,99)@S(0)[0,0 1460x963]
[log] CLICK on L(1059,100)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:55:41.702" starttime="20160901 16:55:39.561" status="PASS"></status>
</kw>
<status endtime="20160901 16:55:41.702" starttime="20160901 16:54:50.807" status="PASS"></status>
</kw>
<status endtime="20160901 16:55:41.718" starttime="20160901 16:54:20.715" status="PASS"></status>
</kw>
<status endtime="20160901 16:55:41.718" starttime="20160901 16:54:03.311" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:55:41.718" starttime="20160901 16:51:13.816" status="PASS"></status>
</test>
<test name="Verify AFP Streaming Channel 1 for matrox" id="s1-s1-s1-s3-t9">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:41.796">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:55:41.796" starttime="20160901 16:55:41.749" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:44.836">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:55:44.867" starttime="20160901 16:55:41.796" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:44.867">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:55:44.867" starttime="20160901 16:55:41.733" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:44.914" starttime="20160901 16:55:44.898" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:44.914">'is afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:44.914">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:44.914">Evaluating 'is afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:44.929">Comparing as boolean values</msg>
<status endtime="20160901 16:55:44.929" starttime="20160901 16:55:44.929" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:44.929">Precondition check on 'is afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:44.929">Is Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:44.929" starttime="20160901 16:55:44.867" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:44.976" starttime="20160901 16:55:44.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:44.976">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:44.992">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:44.992">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:44.992">Comparing as boolean values</msg>
<status endtime="20160901 16:55:44.992" starttime="20160901 16:55:44.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:44.992">Precondition check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:44.992">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:44.992" starttime="20160901 16:55:44.945" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Afp Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:48.907">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160901 16:55:48.907" starttime="20160901 16:55:45.007" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt afp disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Afp Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:48.954" starttime="20160901 16:55:48.923" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:48.954">'is rt afp disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:48.954">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:48.954">Evaluating 'is rt afp disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:48.954">Comparing as boolean values</msg>
<status endtime="20160901 16:55:48.970" starttime="20160901 16:55:48.954" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:48.970">Requirement check on 'is rt afp disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:48.970">Is Rt Afp Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:48.970" starttime="20160901 16:55:48.907" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:55:48.970" starttime="20160901 16:55:41.718" status="PASS"></status>
</test>
<test name="Verify Close Captioning Channel 1 for matrox" id="s1-s1-s1-s3-t10">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:49.032">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:55:49.032" starttime="20160901 16:55:49.001" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:52.128">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:55:52.159" starttime="20160901 16:55:49.032" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:52.159">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:55:52.159" starttime="20160901 16:55:48.985" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:52.206" starttime="20160901 16:55:52.175" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:52.206">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:52.206">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:52.206">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:52.206">Comparing as boolean values</msg>
<status endtime="20160901 16:55:52.222" starttime="20160901 16:55:52.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:52.222">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:52.222">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:52.222" starttime="20160901 16:55:52.159" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:52.253" starttime="20160901 16:55:52.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:52.268">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:52.268">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:52.268">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:52.268">Comparing as boolean values</msg>
<status endtime="20160901 16:55:52.268" starttime="20160901 16:55:52.268" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:52.284">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:52.284">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:52.284" starttime="20160901 16:55:52.222" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Closed Captioning">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:56.371">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160901 16:55:56.371" starttime="20160901 16:55:52.284" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:56.418" starttime="20160901 16:55:56.387" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:56.418">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:56.418">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:56.418">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:56.418">Comparing as boolean values</msg>
<status endtime="20160901 16:55:56.434" starttime="20160901 16:55:56.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:56.434">Requirement check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:56.434">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:56.434" starttime="20160901 16:55:56.371" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:55:56.434" starttime="20160901 16:55:48.970" status="PASS"></status>
</test>
<test name="Verify CC Streaming Channel 1 for matrox" id="s1-s1-s1-s3-t11">
<kw type="kw" name="${region} = shared_keywords.Region For Channel 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${region} = ChannelRegion.Channel Region">
<doc></doc>
<arguments>
<arg>${channel}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:56.496">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:55:56.496" starttime="20160901 16:55:56.465" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelRegion.Confirm Error">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:59.552">Channel Confirm Error : Not active</msg>
<status endtime="20160901 16:55:59.583" starttime="20160901 16:55:56.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:59.583">${region} = R[17,76 918x63]@S(0)[0,0 1460x963] E:Y, T:3.0</msg>
<status endtime="20160901 16:55:59.583" starttime="20160901 16:55:56.449" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:59.630" starttime="20160901 16:55:59.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:59.630">'is cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:59.630">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:59.630">Evaluating 'is cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:59.630">Comparing as boolean values</msg>
<status endtime="20160901 16:55:59.645" starttime="20160901 16:55:59.630" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:59.645">Precondition check on 'is cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:59.645">Is Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:59.645" starttime="20160901 16:55:59.583" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check Precondition">
<doc>Identical to 'check that' but for use in precondition checks.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:55:59.692" starttime="20160901 16:55:59.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:59.692">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:55:59.692">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:55:59.692">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:55:59.692">Comparing as boolean values</msg>
<status endtime="20160901 16:55:59.708" starttime="20160901 16:55:59.692" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:55:59.708">Precondition check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:55:59.708">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:55:59.708" starttime="20160901 16:55:59.645" status="PASS"></status>
</kw>
<kw type="kw" name="ChannelFeatureRegion.Enable Cc Streaming">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:56:03.890">Exception in Warning popup-Window: Not Found
Warning pop-up Window is not displayed</msg>
<status endtime="20160901 16:56:03.890" starttime="20160901 16:55:59.708" status="PASS"></status>
</kw>
<kw type="kw" name="RobotChecks.Check That">
<doc>Check that is used to validate data or state from the system under test.</doc>
<arguments>
<arg>is rt cc disabled</arg>
<arg>${region}</arg>
<arg>=</arg>
<arg>True</arg>
</arguments>
<kw type="kw" name="ChannelFeatureRegion.Is Rt Cc Disabled">
<doc></doc>
<arguments>
<arg>${region}</arg>
</arguments>
<status endtime="20160901 16:56:03.936" starttime="20160901 16:56:03.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:56:03.936">'is rt cc disabled ${region}' is 'True'</msg>
<msg level="INFO" timestamp="20160901 16:56:03.936">Interpreting 'True' as fixed value</msg>
<msg level="INFO" timestamp="20160901 16:56:03.936">Evaluating 'is rt cc disabled ${region} [True]' = 'True'</msg>
<kw type="kw" name="CheckOperator.=">
<doc>Checks whether the left and right side are equal to each other [=]</doc>
<arguments>
<arg>True</arg>
<arg>True</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:56:03.936">Comparing as boolean values</msg>
<status endtime="20160901 16:56:03.952" starttime="20160901 16:56:03.936" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20160901 16:56:03.952">Requirement check on 'is rt cc disabled ${region} [True] = True'</msg>
<msg level="INFO" timestamp="20160901 16:56:03.952">Is Rt Cc Disabled, ${region}
        =, True, True</msg>
<status endtime="20160901 16:56:03.952" starttime="20160901 16:56:03.890" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>matrox</tag>
</tags>
<status critical="yes" endtime="20160901 16:56:03.952" starttime="20160901 16:55:56.434" status="PASS"></status>
</test>
<kw type="teardown" name="shared_keywords.Set Ceco Length">
<doc></doc>
<arguments>
<arg>${15Minutes}</arg>
</arguments>
<kw type="kw" name="${RestartRequired} = PCDetector.Set Ceco Length And Stop Application">
<doc></doc>
<arguments>
<arg>${CecoLength}</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:56:10.430">Before checking the ceco
Scores 15_min_ceco=0.908942461014 and 2_min_ceco=0.953791618347 
Before finding settings area
Before finding settings input area
Before finding Dailog Button
Warning pop-up Window found</msg>
<msg level="INFO" timestamp="20160901 16:56:10.430">${RestartRequired} = True</msg>
<status endtime="20160901 16:56:10.430" starttime="20160901 16:56:03.983" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${RestartRequired}</arg>
<arg>Start PC Detector Application After 15 Seconds</arg>
</arguments>
<kw type="kw" name="shared_keywords.Start PC Detector Application After 15 Seconds">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:56:25.461">Slept 15 seconds</msg>
<status endtime="20160901 16:56:25.477" starttime="20160901 16:56:10.461" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetectorKeywords.Kill PCDetector Process">
<doc></doc>
<arguments>
</arguments>
<status endtime="20160901 16:56:25.492" starttime="20160901 16:56:25.492" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${seconds} sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:56:40.523">Slept 15 seconds</msg>
<status endtime="20160901 16:56:40.539" starttime="20160901 16:56:25.508" status="PASS"></status>
</kw>
<kw type="kw" name="shared_keywords.Start PC Detector Application">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="PCDetector.Start Application">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:57:14.199">License warning not found, no need to make it disappear</msg>
<status endtime="20160901 16:57:14.199" starttime="20160901 16:56:40.539" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:57:29.229">Slept 15 seconds</msg>
<status endtime="20160901 16:57:29.245" starttime="20160901 16:57:14.199" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Maximize Application Window">
<doc></doc>
<arguments>
</arguments>
<msg level="INFO" timestamp="20160901 16:57:31.211">[log] CLICK on L(258,165)@S(0)[0,0 1460x963]
[log] CLICK on L(1125,166)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:57:31.211" starttime="20160901 16:57:29.245" status="PASS"></status>
</kw>
<status endtime="20160901 16:57:31.211" starttime="20160901 16:56:40.539" status="PASS"></status>
</kw>
<status endtime="20160901 16:57:31.211" starttime="20160901 16:56:10.446" status="PASS"></status>
</kw>
<status endtime="20160901 16:57:31.211" starttime="20160901 16:56:10.446" status="PASS"></status>
</kw>
<status endtime="20160901 16:57:31.227" starttime="20160901 16:56:03.983" status="PASS"></status>
</kw>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160901 16:57:31.227" starttime="20160901 16:26:52.183" status="FAIL"></status>
</suite>
<suite source="C:\PCDetector_Testing\Testing\Robot\Tests\10__Functional_Tests\09__Stop_Application.txt" name="Stop Application" id="s1-s1-s1-s4">
<test name="Stop PC Detector Application" id="s1-s1-s1-s4-t1">
<kw type="kw" name="PCDetector.Exit Application">
<doc></doc>
<arguments>
<arg>no</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:57:35.299">[log] CLICK on L(17,29)@S(0)[0,0 1460x963]
[log] CLICK on L(122,116)@S(0)[0,0 1460x963]
[log] CLICK on L(863,527)@S(0)[0,0 1460x963]</msg>
<status endtime="20160901 16:57:35.299" starttime="20160901 16:57:31.539" status="PASS"></status>
</kw>
<kw type="kw" name="PCDetector.Close Application Window">
<doc></doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:57:42.319">Closing the application window failed
Failed to find dialog title or dialog button</msg>
<status endtime="20160901 16:57:42.319" starttime="20160901 16:57:35.299" status="PASS"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 sec</arg>
</arguments>
<msg level="INFO" timestamp="20160901 16:57:44.333">Slept 2 seconds</msg>
<status endtime="20160901 16:57:44.349" starttime="20160901 16:57:42.319" status="PASS"></status>
</kw>
<doc></doc>
<tags>
<tag>default</tag>
</tags>
<status critical="yes" endtime="20160901 16:57:44.349" starttime="20160901 16:57:31.539" status="PASS"></status>
</test>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160901 16:57:44.349" starttime="20160901 16:57:31.336" status="PASS"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160901 16:57:44.396" starttime="20160901 16:16:11.427" status="FAIL"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160901 16:57:44.567" starttime="20160901 16:16:11.365" status="FAIL"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status endtime="20160901 16:57:44.692" starttime="20160901 16:16:11.193" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="17" fail="1">Critical Tests</stat>
<stat pass="17" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="4" fail="0" doc="" links="" combined="" info="">D-08055: Streaming error reported when stopping a channel and AFP streaming is enabled</stat>
<stat pass="7" fail="0" doc="" links="" combined="" info="">default</stat>
<stat pass="4" fail="0" doc="" links="" combined="" info="">known_issue</stat>
<stat pass="10" fail="1" doc="" links="" combined="" info="">matrox</stat>
<stat pass="3" fail="0" doc="" links="" combined="" info="">osprey</stat>
</tag>
<suite>
<stat pass="17" fail="1" name="Robot" id="s1">Robot</stat>
<stat pass="17" fail="1" name="Tests" id="s1-s1">Robot.Tests</stat>
<stat pass="17" fail="1" name="Functional Tests" id="s1-s1-s1">Robot.Tests.Functional Tests</stat>
<stat pass="1" fail="0" name="Start Application" id="s1-s1-s1-s1">Robot.Tests.Functional Tests.Start Application</stat>
<stat pass="5" fail="0" name="Start and Stop Channels" id="s1-s1-s1-s2">Robot.Tests.Functional Tests.Start and Stop Channels</stat>
<stat pass="10" fail="1" name="Enable and Disable Features" id="s1-s1-s1-s3">Robot.Tests.Functional Tests.Enable and Disable Features</stat>
<stat pass="1" fail="0" name="Stop Application" id="s1-s1-s1-s4">Robot.Tests.Functional Tests.Stop Application</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
